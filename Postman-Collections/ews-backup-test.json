{
	"info": {
		"_postman_id": "f97bf733-cd1f-44a6-9aa3-7d4e244eb35d",
		"name": "EWS",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Address",
			"item": [
				{
					"name": "CountryIdFromCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d39ab004-29c9-45de-9624-7653708dac99",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var countryId = body.CountryIdFromCodeResponse.CountryIdFromCodeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Great Britain country ID is 2\", function () {\r",
									"        pm.expect(countryId).to.eql(\"2\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "08dbe614-ae44-4d78-bc5d-71c9e3a34584",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryIdFromCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryIdFromCode>\r\n         <!--Optional:-->\r\n         <ccl:code>GB</ccl:code>\r\n      </ccl:CountryIdFromCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "CountryIso2CodeIsValid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87516f0a-43e7-4f9a-af25-14aa7dba25c0",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var countryIso2CodeIsValid = body.CountryIso2CodeIsValidResponse.CountryIso2CodeIsValidResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"countryIso2CodeIsValid is true\", function () {\r",
									"        pm.expect(countryIso2CodeIsValid).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b62a9956-ab7f-4f16-a681-6ff605550c16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryIso2CodeIsValid\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryIso2CodeIsValid>\r\n         <!--Optional:-->\r\n         <ccl:code>GB</ccl:code>\r\n      </ccl:CountryIso2CodeIsValid>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "CountryNameFromIsoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae184cf-1720-49ca-bf96-8c26575260c5",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var countryName = body.CountryNameFromIsoCodeResponse.CountryNameFromIsoCodeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Name is France\", function () {\r",
									"        pm.expect(countryName).to.eql(\"France\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56d7ad60-125d-47f4-8b34-24a7fe0a2d4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryNameFromIsoCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryNameFromIsoCode>\r\n         <!--Optional:-->\r\n         <ccl:code>FR</ccl:code>\r\n      </ccl:CountryNameFromIsoCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetCountyFromCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "503f15dd-da83-483c-8156-457d81375839",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var countyName = body.GetCountyFromCodeResponse.GetCountyFromCodeResult.Name;\r",
									"var countyCode = body.GetCountyFromCodeResponse.GetCountyFromCodeResult.Code;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"County code is NY\", function () {\r",
									"        pm.expect(countyCode).to.eql(\"NY\");\r",
									"    });\r",
									"\r",
									"pm.test(\"County name is New York\", function () {\r",
									"        pm.expect(countyName).to.eql(\"New York\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "30fc668d-670a-4617-9f37-7b674d75d20d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountyFromCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountyFromCode>\r\n         <!--Optional:-->\r\n         <ccl:countyCode>NY</ccl:countyCode>\r\n      </ccl:GetCountyFromCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetCountyFromName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var countyName = body.GetCountyFromNameResponse.GetCountyFromNameResult.Name;\r",
									"var countyCode = body.GetCountyFromNameResponse.GetCountyFromNameResult.Code;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"County code is NY\", function () {\r",
									"        pm.expect(countyCode).to.eql(\"NY\");\r",
									"    });\r",
									"\r",
									"pm.test(\"County name is New York\", function () {\r",
									"        pm.expect(countyName).to.eql(\"New York\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e393e2aa-4c9e-498c-a1ba-74e04c393948",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountyFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountyFromName>\r\n         <!--Optional:-->\r\n         <ccl:countyName>New York</ccl:countyName>\r\n      </ccl:GetCountyFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerDefaultAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abaa7f19-e597-4866-bd85-c74579bb5b52",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var addressLineOne = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.AddressLine1;\r",
									"var addressLineTwo = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.AddressLine2;\r",
									"var addressLineThree = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.AddressLine3;\r",
									"var countryCode = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Country;\r",
									"var emailAddress = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Email;\r",
									"var postcode = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Postcode;\r",
									"var telephoneNo = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Telephone;\r",
									"var town = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Town;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is Test Line1?\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 2 is Test Line2?\", function () {\r",
									"        pm.expect(addressLineTwo).to.eql(\"Test Line2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 3 is Test Line 3?\", function () {\r",
									"        pm.expect(addressLineThree).to.eql(\"Test Line3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is Kilmarnock?\", function () {\r",
									"        pm.expect(town).to.eql(\"Kilmarnock\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is KA2 0BA?\", function () {\r",
									"        pm.expect(postcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Code is GB?\", function () {\r",
									"        pm.expect(countryCode).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Email is sheptinstall@ccl-logistics.com?\", function () {\r",
									"        pm.expect(emailAddress).to.eql(\"sheptinstall@ccl-logistics.com\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Telephone No is 01414109100?\", function () {\r",
									"        pm.expect(telephoneNo).to.eql(\"01414109100\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eb1902a6-471e-4bb6-9285-b4d9be4126f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerDefaultAddress\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerDefaultAddress>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n         <ccl:collectAddress>true</ccl:collectAddress>\r\n      </ccl:GetCustomerDefaultAddress>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerDefaultAddressFalse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abaa7f19-e597-4866-bd85-c74579bb5b52",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var addressLineOne = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.AddressLine1;\r",
									"var addressLineTwo = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.AddressLine2;\r",
									"var addressLineThree = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.AddressLine3;\r",
									"var countryCode = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Country;\r",
									"var emailAddress = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Email;\r",
									"var postcode = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Postcode;\r",
									"var telephoneNo = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Telephone;\r",
									"var town = body.GetCustomerDefaultAddressResponse.GetCustomerDefaultAddressResult.Town;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is Test Line1?\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 2 is Test Line2?\", function () {\r",
									"        pm.expect(addressLineTwo).to.eql(\"Test Line2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 3 is Test Line 3?\", function () {\r",
									"        pm.expect(addressLineThree).to.eql(\"Test Line3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is Kilmarnock?\", function () {\r",
									"        pm.expect(town).to.eql(\"Kilmarnock\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is KA2 0BA?\", function () {\r",
									"        pm.expect(postcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Code is GB?\", function () {\r",
									"        pm.expect(countryCode).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Email is sheptinstall@ccl-logistics.com?\", function () {\r",
									"        pm.expect(emailAddress).to.eql(\"sheptinstall@ccl-logistics.com\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Telephone No is 01414109100?\", function () {\r",
									"        pm.expect(telephoneNo).to.eql(\"01414109100\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "104c910e-77a2-48d4-b7c2-0d6b998c9910",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerDefaultAddress\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerDefaultAddress>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n         <ccl:collectAddress>false</ccl:collectAddress>\r\n      </ccl:GetCustomerDefaultAddress>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetDefaultCollectionAddressFor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "335780d1-a499-431a-baa5-051e2662a2b7",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var id = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.Id;\r",
									"var companyName = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.CompanyName;\r",
									"var addressLineOne = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.AddressLine1;\r",
									"var addressLineTwo = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.AddressLine2;\r",
									"var addressLineThree = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.AddressLine3;\r",
									"var town = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.Town;\r",
									"var postcode = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.Postcode;\r",
									"var addressType = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.AddressType;\r",
									"var countryCode = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.Country.Code;\r",
									"var countryName = body.GetDefaultCollectionAddressForResponse.GetDefaultCollectionAddressForResult.Country.Name;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ID is 5516090\", function () {\r",
									"        pm.expect(id).to.eql(\"5516090\");\r",
									"    });\r",
									"\r",
									"pm.test(\"CompanyName is Test Customer: Webservices Test Customer\", function () {\r",
									"        pm.expect(companyName).to.eql(\"Test Customer: Webservices Test Customer\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is Test Line1?\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 2 is Test Line2?\", function () {\r",
									"        pm.expect(addressLineTwo).to.eql(\"Test Line2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 3 is Test Line 3?\", function () {\r",
									"        pm.expect(addressLineThree).to.eql(\"Test Line3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is Kilmarnock?\", function () {\r",
									"        pm.expect(town).to.eql(\"Kilmarnock\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is KA2 0BA?\", function () {\r",
									"        pm.expect(postcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Code is GB?\", function () {\r",
									"        pm.expect(countryCode).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Name is United Kingdom?\", function () {\r",
									"        pm.expect(countryName).to.eql(\"United Kingdom\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Type is Business?\", function () {\r",
									"        pm.expect(addressType).to.eql(\"Business\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9e2a706a-c158-4529-a031-2730063e8430",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetDefaultCollectionAddressFor\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetDefaultCollectionAddressFor>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:username>sheptinstall@ccl-logistics.com</ccl:username>\r\n      </ccl:GetDefaultCollectionAddressFor>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetAceAddressBookByNicknameSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "130973bc-d152-4864-b721-ccba6a8af90c",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var addressLineOne = body.GetAceAddressBookByNicknameSearchResponse.GetAceAddressBookByNicknameSearchResult.WebServiceAddress.AddressLine1;\r",
									"var companyName = body.GetAceAddressBookByNicknameSearchResponse.GetAceAddressBookByNicknameSearchResult.WebServiceAddress.CompanyName;\r",
									"var country = body.GetAceAddressBookByNicknameSearchResponse.GetAceAddressBookByNicknameSearchResult.WebServiceAddress.Country;\r",
									"var postcode = body.GetAceAddressBookByNicknameSearchResponse.GetAceAddressBookByNicknameSearchResult.WebServiceAddress.Postcode;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"addressLineOne is Test line 1\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"Test line 1\");\r",
									"    });\r",
									"    \r",
									"pm.test(\"country is GB\", function () {\r",
									"        pm.expect(country).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"postcode is G2 1DY\", function () {\r",
									"        pm.expect(postcode).to.eql(\"G2 1DY\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07fc8b27-7815-4b69-86ab-6ba7cbf7e012",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAceAddressBookByNicknameSearch\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAceAddressBookByNicknameSearch>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:searchTerm>Glasgow</ccl:searchTerm>\r\n      </ccl:GetAceAddressBookByNicknameSearch>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetCountryFromName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var countryName = body.GetCountryFromNameResponse.GetCountryFromNameResult.Name;\r",
									"var isoTwoCode = body.GetCountryFromNameResponse.GetCountryFromNameResult.Iso2Code;\r",
									"var euMember = body.GetCountryFromNameResponse.GetCountryFromNameResult.EuropeanUnionMember;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"countryName is United Kingdom\", function () {\r",
									"        pm.expect(countryName).to.eql(\"United Kingdom\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isoTwoCode is GB\", function () {\r",
									"        pm.expect(isoTwoCode).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"euMember is false\", function () {\r",
									"        pm.expect(euMember).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "027bbcb6-a821-437d-8cf3-5cc8431b9d94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountryFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountryFromName>\r\n         <!--Optional:-->\r\n         <ccl:name>United Kingdom</ccl:name>\r\n      </ccl:GetCountryFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "GetAllCounties",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d39ab004-29c9-45de-9624-7653708dac99",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var counties = body[\"GetAllCountiesResponse\"][\"GetAllCountiesResult\"][\"EbosStateOrCountyInCountry\"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Response contains Names\", function(){\r",
									"        _.each(counties, (county) => {\r",
									"            pm.expect(county.Name).to.be.a('string').and.not.be.empty;\r",
									"        });\r",
									"    });\r",
									"\r",
									"pm.test(\"Response contains CountyIso2Codes\", function(){\r",
									"        _.each(counties, (county) => {\r",
									"            pm.expect(county.CountryIso2Code.length).to.equal(2);\r",
									"        });\r",
									"    });\r",
									"\r",
									"pm.test(\"American and Canadian states provide state codes, Irish states do not\", function(){\r",
									"        _.each(counties, (county) => {\r",
									"            if(county.CountryIso2Code == \"CA\" || county.CountryIso2Code == \"US\"){\r",
									"                pm.expect(county.Code.length).to.equal(2);\r",
									"            } else {\r",
									"                pm.expect(county.Code).to.be.empty;\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bdd18ac6-e82d-4852-97f9-a35fe0e7f484",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllCounties\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n  <soap:Body>\r\n    <GetAllCounties xmlns=\"CCL_Ebos_Webservice\" />\r\n  </soap:Body>\r\n</soap:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				}
			],
			"id": "253fdac2-ce1f-4093-bacb-68a8a4a65f26"
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "Shipping Requirements",
					"item": [
						{
							"name": "AddShippingRequirementLookupForCustomer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
										"exec": [
											"try {\r",
											"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
											"\r",
											"var customerName = body.AddShippingRequirementLookupForCustomerResponse;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"}\r",
											"\r",
											"catch (e) {\r",
											"\r",
											"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
											"\r",
											"    pm.test(\"Exception is thrown during testing\", function () {\r",
											"        pm.expect(e).to.be.null;\r",
											"    });\r",
											"\r",
											"    console.log(bodyError.faultstring);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "949727da-e102-43ef-97c4-9f26b9d4af33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "\"CCL_Ebos_Webservice/AddShippingRequirementLookupForCustomer\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:AddShippingRequirementLookupForCustomer>\r\n         <ccl:customerId>81007</ccl:customerId>\r\n         <ccl:shippingRequirementId>2056270</ccl:shippingRequirementId>\r\n         <!--Optional:-->\r\n         <ccl:customerPrimaryReference> {{$guid}},</ccl:customerPrimaryReference>\r\n      </ccl:AddShippingRequirementLookupForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{url}}/{{customerService}}"
							},
							"response": []
						},
						{
							"name": "DeleteShippingRequirementLookupForCustomer Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
										"exec": [
											"try {\r",
											"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
											"\r",
											"var customerName = body.DeleteShippingRequirementLookupForCustomerResponse;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"}\r",
											"\r",
											"catch (e) {\r",
											"\r",
											"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
											"\r",
											"    pm.test(\"Exception is thrown during testing\", function () {\r",
											"        pm.expect(e).to.be.null;\r",
											"    });\r",
											"\r",
											"    console.log(bodyError.faultstring);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dfc15480-9568-4797-9a17-d52eca2ab30a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "\"CCL_Ebos_Webservice/DeleteShippingRequirementLookupForCustomer\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:DeleteShippingRequirementLookupForCustomer>\r\n         <ccl:customerId>81007</ccl:customerId>\r\n         <ccl:shippingRequirementId>2056270</ccl:shippingRequirementId>\r\n      </ccl:DeleteShippingRequirementLookupForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{url}}/{{customerService}}"
							},
							"response": []
						},
						{
							"name": "AddShippingRequirementLookupsForCustomer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
										"exec": [
											"try {\r",
											"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
											"\r",
											"var customerName = body.AddShippingRequirementLookupsForCustomerResponse;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"}\r",
											"\r",
											"catch (e) {\r",
											"\r",
											"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
											"\r",
											"    pm.test(\"Exception is thrown during testing\", function () {\r",
											"        pm.expect(e).to.be.null;\r",
											"    });\r",
											"\r",
											"    console.log(bodyError.faultstring);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5c5a7a01-9960-471c-a504-7a04fd9b9f7d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "\"CCL_Ebos_Webservice/AddShippingRequirementLookupsForCustomer\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:AddShippingRequirementLookupsForCustomer>\r\n         <!--Optional:-->\r\n         <ccl:lookups>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:DispatchAppShippingRequirementLookup>\r\n               <!--Optional:-->\r\n               <ccl:CustomerPrimaryReference>{{$guid}}</ccl:CustomerPrimaryReference>\r\n               <ccl:CustomerId>81007</ccl:CustomerId>\r\n               <ccl:ShippingRequirementId>2056270</ccl:ShippingRequirementId>\r\n            </ccl:DispatchAppShippingRequirementLookup>\r\n              <ccl:DispatchAppShippingRequirementLookup>\r\n               <!--Optional:-->\r\n               <ccl:CustomerPrimaryReference>{{$guid}}</ccl:CustomerPrimaryReference>\r\n               <ccl:CustomerId>81007</ccl:CustomerId>\r\n               <ccl:ShippingRequirementId>2056270</ccl:ShippingRequirementId>\r\n            </ccl:DispatchAppShippingRequirementLookup>\r\n         </ccl:lookups>\r\n      </ccl:AddShippingRequirementLookupsForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{url}}/{{customerService}}"
							},
							"response": []
						},
						{
							"name": "DeleteShippingRequirementLookupForCustomer Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
										"exec": [
											"try {\r",
											"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
											"\r",
											"var customerName = body.DeleteShippingRequirementLookupForCustomerResponse;\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"}\r",
											"\r",
											"catch (e) {\r",
											"\r",
											"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
											"\r",
											"    pm.test(\"Exception is thrown during testing\", function () {\r",
											"        pm.expect(e).to.be.null;\r",
											"    });\r",
											"\r",
											"    console.log(bodyError.faultstring);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d2d76582-4ac9-417d-967d-4a3afcfa58dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "\"CCL_Ebos_Webservice/DeleteShippingRequirementLookupForCustomer\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:DeleteShippingRequirementLookupForCustomer>\r\n         <ccl:customerId>81007</ccl:customerId>\r\n         <ccl:shippingRequirementId>2056270</ccl:shippingRequirementId>\r\n      </ccl:DeleteShippingRequirementLookupForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{url}}/{{customerService}}"
							},
							"response": []
						},
						{
							"name": "DeleteShippingRequirementLookupForCustomer Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
										"exec": [
											"try {\r",
											"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
											"\r",
											"var customerName = body.DeleteShippingRequirementLookupForCustomerResponse;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"}\r",
											"\r",
											"catch (e) {\r",
											"\r",
											"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
											"\r",
											"    pm.test(\"Exception is thrown during testing\", function () {\r",
											"        pm.expect(e).to.be.null;\r",
											"    });\r",
											"\r",
											"    console.log(bodyError.faultstring);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "358b8c98-6e20-46b1-8b13-11921915caa1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "\"CCL_Ebos_Webservice/DeleteShippingRequirementLookupForCustomer\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:DeleteShippingRequirementLookupForCustomer>\r\n         <ccl:customerId>81007</ccl:customerId>\r\n         <ccl:shippingRequirementId>2056270</ccl:shippingRequirementId>\r\n      </ccl:DeleteShippingRequirementLookupForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{url}}/{{customerService}}"
							},
							"response": []
						},
						{
							"name": "UpdateShippingRequirementLookupsForCustomer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
										"exec": [
											"try {\r",
											"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
											"\r",
											"var customerName = body.UpdateShippingRequirementLookupsForCustomerResponse;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"}\r",
											"\r",
											"catch (e) {\r",
											"\r",
											"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
											"\r",
											"    pm.test(\"Exception is thrown during testing\", function () {\r",
											"        pm.expect(e).to.be.null;\r",
											"    });\r",
											"\r",
											"    console.log(bodyError.faultstring);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "30ad1fb4-1b33-4342-ae4e-85a9a25adba9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "\"CCL_Ebos_Webservice/UpdateShippingRequirementLookupsForCustomer\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:UpdateShippingRequirementLookupsForCustomer>\r\n         <!--Optional:-->\r\n         <ccl:lookups>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:DispatchAppShippingRequirementLookup>\r\n               <!--Optional:-->\r\n               <ccl:CustomerPrimaryReference>4ac84cbd-3d81-487d-a2f1-196be0662986</ccl:CustomerPrimaryReference>\r\n               <ccl:CustomerId>81007</ccl:CustomerId>\r\n               <ccl:ShippingRequirementId>2029502</ccl:ShippingRequirementId>\r\n               <ccl:EbosOrderId>9601289</ccl:EbosOrderId>\r\n            </ccl:DispatchAppShippingRequirementLookup>\r\n         </ccl:lookups>\r\n      </ccl:UpdateShippingRequirementLookupsForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{url}}/{{customerService}}"
							},
							"response": []
						},
						{
							"name": "UpdateShippingRequirementLookupsForCustomer Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
										"exec": [
											"try {\r",
											"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
											"\r",
											"var customerName = body.UpdateShippingRequirementLookupsForCustomerResponse;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"}\r",
											"\r",
											"catch (e) {\r",
											"\r",
											"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
											"\r",
											"    pm.test(\"Exception is thrown during testing\", function () {\r",
											"        pm.expect(e).to.be.null;\r",
											"    });\r",
											"\r",
											"    console.log(bodyError.faultstring);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "13930645-ec88-49b3-a8b6-5995a122def8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "\"CCL_Ebos_Webservice/UpdateShippingRequirementLookupsForCustomer\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:UpdateShippingRequirementLookupsForCustomer>\r\n         <!--Optional:-->\r\n         <ccl:lookups>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:DispatchAppShippingRequirementLookup>\r\n               <!--Optional:-->\r\n               <ccl:CustomerPrimaryReference>4ac84cbd-3d81-487d-a2f1-196be0662986</ccl:CustomerPrimaryReference>\r\n               <ccl:CustomerId>81007</ccl:CustomerId>\r\n               <ccl:ShippingRequirementId>2029502</ccl:ShippingRequirementId>\r\n               <ccl:EbosOrderId>9613870</ccl:EbosOrderId>\r\n            </ccl:DispatchAppShippingRequirementLookup>\r\n         </ccl:lookups>\r\n      </ccl:UpdateShippingRequirementLookupsForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
								},
								"url": "{{url}}/{{customerService}}"
							},
							"response": []
						}
					],
					"id": "5314955f-23de-445b-8129-bbfd77de5ca6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "652c63f4-667b-4a8c-86a7-4ea350c39932",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c4350210-baf7-4caf-80b9-c2c0d188c0b7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GetAllCustomerSupplierShipmentTypeExceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerIdOne = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[0].       CustomerId;\r",
									"var supplierIdOne = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[0].       SupplierId;\r",
									"var shipmentTypeCodeOne = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[0].     ShipmentTypeCode;\r",
									"var supplierCodeOne = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[0].     SupplierCode;\r",
									"var customerIdTwo = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[1].       CustomerId;\r",
									"var supplierIdTwo = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[1].       SupplierId;\r",
									"var shipmentTypeCodeTwo = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[1].     ShipmentTypeCode;\r",
									"var supplierCodeTwo = body.GetAllCustomerSupplierShipmentTypeExceptionsResponse.GetAllCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException[1].     SupplierCode;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerIdOne is 81314\", function () {\r",
									"        pm.expect(customerIdOne).to.eql(\"81314\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierIdOne is 6061\", function () {\r",
									"        pm.expect(supplierIdOne).to.eql(\"6061\");\r",
									"    });\r",
									"\r",
									"pm.test(\"shipmentTypeCodeOne is document\", function () {\r",
									"        pm.expect(shipmentTypeCodeOne).to.eql(\"document\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierCodeOne is dpdlocal\", function () {\r",
									"        pm.expect(supplierCodeOne).to.eql(\"dpdlocal\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerIdTwo is 81314\", function () {\r",
									"        pm.expect(customerIdTwo).to.eql(\"81314\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierIdTwo is 933\", function () {\r",
									"        pm.expect(supplierIdTwo).to.eql(\"933\");\r",
									"    });\r",
									"\r",
									"pm.test(\"shipmentTypeCodeTwo is parcel\", function () {\r",
									"        pm.expect(shipmentTypeCodeTwo).to.eql(\"parcel\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierCodeTwo is dpd\", function () {\r",
									"        pm.expect(supplierCodeTwo).to.eql(\"dpd\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "32a5148a-566d-47fd-bc69-221f5cdc1822",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllCustomerSupplierShipmentTypeExceptions\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllCustomerSupplierShipmentTypeExceptions>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n      </ccl:GetAllCustomerSupplierShipmentTypeExceptions>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCommercialInvoiceDefaultSignature",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var nameOfSignatory = body.GetCommercialInvoiceDefaultSignatureResponse.GetCommercialInvoiceDefaultSignatureResult.NameOfSignatory;\r",
									"var positionInCompany = body.GetCommercialInvoiceDefaultSignatureResponse.GetCommercialInvoiceDefaultSignatureResult.PositionInCompany;\r",
									"\r",
									"console.log(nameOfSignatory);\r",
									"console.log(positionInCompany);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Name of Signatory is Mr Smith\", function () {\r",
									"        pm.expect(nameOfSignatory).to.eql(\"Mr Smith\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Position in Company is Warehouse Manager\", function () {\r",
									"        pm.expect(positionInCompany).to.eql(\"Warehouse Manager\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f48b0d34-55ce-4d55-9cc6-0d2a0c271433",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCommercialInvoiceDefaultSignature\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCommercialInvoiceDefaultSignature>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <ccl:supplierId>933</ccl:supplierId>\r\n      </ccl:GetCommercialInvoiceDefaultSignature>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetAllRolesByCustomer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerId = body.GetAllRolesByCustomerResponse.GetAllRolesByCustomerResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e95de010-83cf-4201-96a1-98294e34edb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllRolesByCustomer\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllRolesByCustomer>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n         <ccl:allowDhlInsurance>true</ccl:allowDhlInsurance>\r\n         <ccl:allowUkMailInsurance>false</ccl:allowUkMailInsurance>\r\n      </ccl:GetAllRolesByCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{urlAuth}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetAllCarriersByCustomer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierId = body.GetAllCarriersByCustomerResponse.GetAllCarriersByCustomerResult.Supplier[0].Id;\r",
									"var supplierName = body.GetAllCarriersByCustomerResponse.GetAllCarriersByCustomerResult.Supplier[0].Name;\r",
									"var supplierIdTwo = body.GetAllCarriersByCustomerResponse.GetAllCarriersByCustomerResult.Supplier[1].Id;\r",
									"var supplierNameTwo = body.GetAllCarriersByCustomerResponse.GetAllCarriersByCustomerResult.Supplier[1].Name;\r",
									"var supplierIdThree = body.GetAllCarriersByCustomerResponse.GetAllCarriersByCustomerResult.Supplier[2].Id;\r",
									"var supplierNameThree = body.GetAllCarriersByCustomerResponse.GetAllCarriersByCustomerResult.Supplier[2].Name;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierId is 558\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"558\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierName is DHL\", function () {\r",
									"        pm.expect(supplierName).to.eql(\"DHL\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierIdTwo is 933\", function () {\r",
									"        pm.expect(supplierIdTwo).to.eql(\"933\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierNameTwo is DPD\", function () {\r",
									"        pm.expect(supplierNameTwo).to.eql(\"DPD\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierIdThree is 1573\", function () {\r",
									"        pm.expect(supplierIdThree).to.eql(\"1573\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierNameThree is 1573\", function () {\r",
									"        pm.expect(supplierNameThree).to.eql(\"Hermes\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a748dde-285e-4a96-82d8-4b83ca2b72cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllCarriersByCustomer\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllCarriersByCustomer>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n      </ccl:GetAllCarriersByCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{urlAuth}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerAccountAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try{\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var addressLineOne = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.AddressLine1;\r",
									"var addressLineTwo = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.AddressLine2;\r",
									"var addressLineThree = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.AddressLine3;\r",
									"var town = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.Town;\r",
									"var postcode = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.Postcode;\r",
									"var addressType = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.AddressType;\r",
									"var countryCode = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.Country.Code;\r",
									"var countryName = body.GetCustomerAccountAddressResponse.GetCustomerAccountAddressResult.Country.Name;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is Test Line1?\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 2 is Test Line2?\", function () {\r",
									"        pm.expect(addressLineTwo).to.eql(\"Test Line2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 3 is Test Line3?\", function () {\r",
									"        pm.expect(addressLineThree).to.eql(\"Test Line3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is Kilmarnock?\", function () {\r",
									"        pm.expect(town).to.eql(\"Kilmarnock\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is KA2 0BA?\", function () {\r",
									"        pm.expect(postcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Code is GB?\", function () {\r",
									"        pm.expect(countryCode).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Name is United Kingdom?\", function () {\r",
									"        pm.expect(countryName).to.eql(\"United Kingdom\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Type is Business?\", function () {\r",
									"        pm.expect(addressType).to.eql(\"Business\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56cc2a6d-e430-4941-8410-0ba0cb105208",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerAccountAddress\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerAccountAddress>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n      </ccl:GetCustomerAccountAddress>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerAccountId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var accountId = body.GetCustomerAccountIdResponse.GetCustomerAccountIdResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"accountId is 'T01010101T\", function () {\r",
									"        pm.expect(accountId).to.eql(\"T01010101T\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "858b9b1e-a838-4001-9d6b-5c18947e0139",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerAccountId\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerAccountId>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:postcode>KA2 0BA</ccl:postcode>\r\n         <ccl:supplierId>1761</ccl:supplierId>\r\n      </ccl:GetCustomerAccountId>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerDefaultCollectionAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var id = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.Id;\r",
									"var companyName = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.CompanyName;\r",
									"var addressLineOne = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.AddressLine1;\r",
									"var addressLineTwo = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.AddressLine2;\r",
									"var addressLineThree = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.AddressLine3;\r",
									"var town = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.Town;\r",
									"var postcode = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.Postcode;\r",
									"var addressType = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.AddressType;\r",
									"var email = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.Email;\r",
									"var countryCode = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.Country.Code;\r",
									"var countryName = body.GetCustomerDefaultCollectionAddressResponse.GetCustomerDefaultCollectionAddressResult.Country.Name;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ID is 5516090\", function () {\r",
									"        pm.expect(id).to.eql(\"5516090\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Company Name is Test Customer: Webservices Test Customer\", function () {\r",
									"        pm.expect(companyName).to.eql(\"Test Customer: Webservices Test Customer\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is Test Line1?\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 2 is Test Line 2?\", function () {\r",
									"        pm.expect(addressLineTwo).to.eql(\"Test Line2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 3 is Test Line 3?\", function () {\r",
									"        pm.expect(addressLineThree).to.eql(\"Test Line3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is Kilmarnock?\", function () {\r",
									"        pm.expect(town).to.eql(\"Kilmarnock\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is KA2 0BA?\", function () {\r",
									"        pm.expect(postcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Code is GB?\", function () {\r",
									"        pm.expect(countryCode).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country Name is United Kingdom?\", function () {\r",
									"        pm.expect(countryName).to.eql(\"United Kingdom\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Type is Business?\", function () {\r",
									"        pm.expect(addressType).to.eql(\"Business\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Email address is sheptinstall@ccl-logistics.com?\", function () {\r",
									"        pm.expect(email).to.eql(\"sheptinstall@ccl-logistics.com\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d1f4218-ca63-47b2-8b21-07ba752e3832",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerDefaultCollectionAddress\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerDefaultCollectionAddress>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n      </ccl:GetCustomerDefaultCollectionAddress>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerDhlSupplierAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerDhlSupplierAccount = body.GetCustomerDhlSupplierAccountResponse.GetCustomerDhlSupplierAccountResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerDhlSupplierAccount is 951019960\", function () {\r",
									"        pm.expect(customerDhlSupplierAccount).to.eql(\"951019960\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "699e3275-c0b6-498d-b03a-15f3ec698d21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerDhlSupplierAccount\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<ccl:GetCustomerDhlSupplierAccount>\r\n<ccl:customerId>81314</ccl:customerId>\r\n<ccl:supplierId>558</ccl:supplierId>\r\n<!--Optional:-->\r\n<ccl:collectionCountryCode>GB</ccl:collectionCountryCode>\r\n<!--Optional:-->\r\n<ccl:deliveryCountryCode>GB</ccl:deliveryCountryCode>\r\n<ccl:import>0</ccl:import>\r\n<ccl:export>1</ccl:export>\r\n<!--Optional:-->\r\n<ccl:globalProductCode>A</ccl:globalProductCode>\r\n<!--Optional:-->\r\n<ccl:shippingRegion>B</ccl:shippingRegion>\r\n<!--Optional:-->\r\n<ccl:serviceDescription>?</ccl:serviceDescription>\r\n<!--Optional:-->\r\n<ccl:postcode>?</ccl:postcode>\r\n</ccl:GetCustomerDhlSupplierAccount>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerDhlSupplierAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierAccount = body.GetCustomerDhlSupplierAccountsResponse.GetCustomerDhlSupplierAccountsResult.SupplierAccountServiceDescriptor.SupplierAccount;\r",
									"var supplierId = body.GetCustomerDhlSupplierAccountsResponse.GetCustomerDhlSupplierAccountsResult.SupplierAccountServiceDescriptor.SupplierServiceDescriptor.SupplierId;\r",
									"var serviceCode = body.GetCustomerDhlSupplierAccountsResponse.GetCustomerDhlSupplierAccountsResult.SupplierAccountServiceDescriptor.SupplierServiceDescriptor.ServiceCode;\r",
									"var serviceDescription = body.GetCustomerDhlSupplierAccountsResponse.GetCustomerDhlSupplierAccountsResult.SupplierAccountServiceDescriptor.SupplierServiceDescriptor.ServiceDescription;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierAccount is 951019960\", function () {\r",
									"        pm.expect(supplierAccount).to.eql(\"951019960\");\r",
									"    });\r",
									"\r",
									"pm.test(\"serviceCode is ND18:00\", function () {\r",
									"        pm.expect(serviceCode).to.eql(\"ND18:00\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierId is 33\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"33\");\r",
									"    });\r",
									"\r",
									"pm.test(\"serviceDescription is Next Day\", function () {\r",
									"        pm.expect(serviceDescription).to.eql(\"Next Day\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed9fb89c-29b0-41e1-8671-9d35678c6c9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerDhlSupplierAccounts\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerDhlSupplierAccounts>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:collectionCountryCode>GB</ccl:collectionCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryCountryCode>GB</ccl:deliveryCountryCode>\r\n         <ccl:import>0</ccl:import>\r\n         <ccl:export>1</ccl:export>\r\n         <!--Optional:-->\r\n         <ccl:shippingRegion></ccl:shippingRegion>\r\n         <!--Optional:-->\r\n         <ccl:postcode></ccl:postcode>\r\n         <!--Optional:-->\r\n         <ccl:suppliersWithDescriptions>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:SupplierServiceDescriptor>\r\n               <ccl:SupplierId>33</ccl:SupplierId>\r\n               <!--Optional:-->\r\n               <ccl:ServiceCode>ND18:00</ccl:ServiceCode>\r\n               <!--Optional:-->\r\n               <ccl:ServiceDescription>Next Day</ccl:ServiceDescription>\r\n            </ccl:SupplierServiceDescriptor>\r\n         </ccl:suppliersWithDescriptions>\r\n      </ccl:GetCustomerDhlSupplierAccounts>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetOnBehalfOfCustomer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerId = body.GetOnBehalfOfCustomerResponse.GetOnBehalfOfCustomerResult.CustomerID;\r",
									"var onBehalfOfCustomerCode = body.GetOnBehalfOfCustomerResponse.GetOnBehalfOfCustomerResult.OnBehalfOfCustomerCode;\r",
									"var allowmyCCLMessaging = body.GetOnBehalfOfCustomerResponse.GetOnBehalfOfCustomerResult.AllowmyCCLMessaging;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerId is 81004\", function () {\r",
									"        pm.expect(customerId).to.eql(\"81004\");\r",
									"    });\r",
									"\r",
									"pm.test(\"onBehalfOfCustomerCode is IanOBOC\", function () {\r",
									"        pm.expect(onBehalfOfCustomerCode).to.eql(\"IanOBOC\");\r",
									"    });\r",
									"\r",
									"pm.test(\"allowmyCCLMessaging is false\", function () {\r",
									"        pm.expect(allowmyCCLMessaging).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "06010ac3-77b7-492f-bcd7-c8bdf635dc10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetOnBehalfOfCustomer\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetOnBehalfOfCustomer>\r\n         <ccl:customerId>80971</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:code>IanOBOC</ccl:code>\r\n      </ccl:GetOnBehalfOfCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetOnBehalfOfParent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerId = body.GetOnBehalfOfParentResponse.GetOnBehalfOfParentResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerId is 81004\", function () {\r",
									"        pm.expect(customerId).to.eql(\"80971\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9e9a890e-2a92-4973-90b3-24361d651cb0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetOnBehalfOfParent\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetOnBehalfOfParent>\r\n         <ccl:childId>81004</ccl:childId>\r\n      </ccl:GetOnBehalfOfParent>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetOnBehalfOfCustomers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerId = body.GetOnBehalfOfCustomersResponse.GetOnBehalfOfCustomersResult.OnBehalfOfCustomer.CustomerID;\r",
									"var onBehalfOfCustomerCode = body.GetOnBehalfOfCustomersResponse.GetOnBehalfOfCustomersResult.OnBehalfOfCustomer.OnBehalfOfCustomerCode;\r",
									"var allowmyCCLMessaging = body.GetOnBehalfOfCustomersResponse.GetOnBehalfOfCustomersResult.OnBehalfOfCustomer.AllowmyCCLMessaging;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerId is 81004\", function () {\r",
									"        pm.expect(customerId).to.eql(\"81004\");\r",
									"    });\r",
									"\r",
									"pm.test(\"onBehalfOfCustomerCode is IanOBOC\", function () {\r",
									"        pm.expect(onBehalfOfCustomerCode).to.eql(\"IanOBOC\");\r",
									"    });\r",
									"\r",
									"pm.test(\"allowmyCCLMessaging is false\", function () {\r",
									"        pm.expect(allowmyCCLMessaging).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0259507b-2473-4d14-9628-5de3030ed455",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetOnBehalfOfCustomers\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetOnBehalfOfCustomers>\r\n         <ccl:customerId>80971</ccl:customerId>\r\n      </ccl:GetOnBehalfOfCustomers>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "OnBehalfOfCustomerExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var onBehalfOfCustomerExists = body.OnBehalfOfCustomerExistsResponse.OnBehalfOfCustomerExistsResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"onBehalfOfCustomerExists is true\", function () {\r",
									"        pm.expect(onBehalfOfCustomerExists).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "028141d6-4615-4df1-bce2-cf7fbd40f974",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/OnBehalfOfCustomerExists\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:OnBehalfOfCustomerExists>\r\n         <ccl:customerId>80971</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:code>IanOBOC</ccl:code>\r\n      </ccl:OnBehalfOfCustomerExists>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "OnBehalfOfCustomerExistsFalse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var onBehalfOfCustomerExists = body.OnBehalfOfCustomerExistsResponse.OnBehalfOfCustomerExistsResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"onBehalfOfCustomerExists is false\", function () {\r",
									"        pm.expect(onBehalfOfCustomerExists).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72dbea65-d6fb-4247-b184-2c588ed79d18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/OnBehalfOfCustomerExists\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:OnBehalfOfCustomerExists>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:code>IanOBOC</ccl:code>\r\n      </ccl:OnBehalfOfCustomerExists>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerName = body.GetCustomerNameResponse.GetCustomerNameResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer Name is Test Customer: Webservices Test Customer\", function () {\r",
									"        pm.expect(customerName).to.eql(\"Test Customer: Webservices Test Customer\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2da8a581-ac90-4dc5-8753-da5a7c9c7d2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerName>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n      </ccl:GetCustomerName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var settingKeyOne = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[0].SettingKey;\r",
									"var SettingValueOne = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[0].SettingValue;\r",
									"var settingKeyTwo = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[1].SettingKey;\r",
									"var SettingValueTwo = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[1].SettingValue;\r",
									"var settingKeyThree = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[2].SettingKey;\r",
									"var SettingValueThree = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[2].SettingValue;\r",
									"var settingKeyFour = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[3].SettingKey;\r",
									"var SettingValueFour = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[3].SettingValue;\r",
									"var settingKeyFive = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[4].SettingKey;\r",
									"var SettingValueFive = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[4].SettingValue;\r",
									"var settingKeySix = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[5].SettingKey;\r",
									"var SettingValueSix = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[5].SettingValue;\r",
									"var settingKeySeven = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[6].SettingKey;\r",
									"var SettingValueSeven = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[6].SettingValue;\r",
									"var settingKeyEight = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[7].SettingKey;\r",
									"var SettingValueEight = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[7].SettingValue;\r",
									"var settingKeyNine = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[8].SettingKey;\r",
									"var SettingValueNine = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[8].SettingValue;\r",
									"var settingKeyTen = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[9].SettingKey;\r",
									"var SettingValueTen = body.GetCustomerSettingsResponse.GetCustomerSettingsResult.CustomerSetting[9].SettingValue;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Advanced Commercial Invoice is set to False\", function () {\r",
									"        pm.expect(SettingValueOne).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"AdvancedCommercialInvoiceDefaultCurrency is set to 1\", function () {\r",
									"        pm.expect(SettingValueTwo).to.eql(\"1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"BillDutyAndTaxes is set to False\", function () {\r",
									"        pm.expect(SettingValueThree).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"BusinessRulesSettings is set to False\", function () {\r",
									"        pm.expect(SettingValueFour).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"PackFeature is set to False\", function () {\r",
									"        pm.expect(SettingValueFive).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"PerformEmissionsCalculations is set to False\", function () {\r",
									"        pm.expect(SettingValueSix).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShowAttachmentsInShipmentTrackingResults is set to False\", function () {\r",
									"        pm.expect(SettingValueSeven).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SendSupplierBranchPalletUpdates is set to False\", function () {\r",
									"        pm.expect(SettingValueEight).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShowAttachmentsInShipmentTrackingResults is set to False\", function () {\r",
									"        pm.expect(SettingValueNine).to.eql(\"False\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SupplierAccountSelection is set to False\", function () {\r",
									"        pm.expect(SettingValueTen).to.eql(\"False\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "53ee35f2-8d8d-4c91-9013-c96b36ea33a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerSettings\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerSettings>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n      </ccl:GetCustomerSettings>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetDefaultSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var id = body.GetDefaultSettingsResponse.GetDefaultSettingsResult.ID;\r",
									"var customerId = body.GetDefaultSettingsResponse.GetDefaultSettingsResult.CustomerID;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"id is 743\", function () {\r",
									"        pm.expect(id).to.eql(\"743\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerId is 75759\", function () {\r",
									"        pm.expect(customerId).to.eql(\"75759\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b70a39fe-1691-41b8-8f64-390e87533ba3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetDefaultSettings\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetDefaultSettings>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n      </ccl:GetDefaultSettings>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerSupplierAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerSupplierAccountNo = body.GetCustomerSupplierAccountResponse.GetCustomerSupplierAccountResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer Supplier Account Number is Tuffnells - T01010101T\", function () {\r",
									"        pm.expect(customerSupplierAccountNo).to.eql(\"T01010101T\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed69cf4c-0dd7-4b76-a48f-a6176baeba2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerSupplierAccount\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerSupplierAccount>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n         <ccl:supplierID>1761</ccl:supplierID>\r\n         <!--Optional:-->\r\n         <ccl:postcode>KA2 0BA</ccl:postcode>\r\n      </ccl:GetCustomerSupplierAccount>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerSupplierAccountPostcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var postcode = body.GetCustomerSupplierAccountPostcodeResponse.GetCustomerSupplierAccountPostcodeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Hermes Postcode for 81314 is KA2 0BA\", function () {\r",
									"        pm.expect(postcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7186a7b0-61ab-45d6-9b54-eb7d878e4f36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerSupplierAccountPostcode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerSupplierAccountPostcode>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <ccl:supplierId>1761</ccl:supplierId>\r\n         <!--Optional:-->\r\n         <ccl:accountNumber>T01010101T</ccl:accountNumber>\r\n      </ccl:GetCustomerSupplierAccountPostcode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetCustomerSupplierShipmentTypeExceptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shipmentTypeCode = body.GetCustomerSupplierShipmentTypeExceptionsResponse.GetCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException.ShipmentTypeCode;\r",
									"\r",
									"var supplierCode = body.GetCustomerSupplierShipmentTypeExceptionsResponse.GetCustomerSupplierShipmentTypeExceptionsResult.CustomerSupplierShipmentTypeException.SupplierCode;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"shipmentTypeCode is parcel\", function () {\r",
									"        pm.expect(shipmentTypeCode).to.eql(\"parcel\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SupplierCode is DPD\", function () {\r",
									"        pm.expect(supplierCode).to.eql(\"dpd\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "376a5a45-78b0-4625-b200-5d97efea4910",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCustomerSupplierShipmentTypeExceptions\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCustomerSupplierShipmentTypeExceptions>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <ccl:supplierId>933</ccl:supplierId>\r\n      </ccl:GetCustomerSupplierShipmentTypeExceptions>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetShippingRequirement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shippingRequirementId = body.GetShippingRequirementResponse.GetShippingRequirementResult.ShippingRequirementId;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShippingRequirements for AutoTest01\", function () {\r",
									"        pm.expect(shippingRequirementId).to.eql(\"2024669\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69e0e5f8-51c7-4d7c-a35a-45fe64191ace",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetShippingRequirement\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetShippingRequirement>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:customerPrimaryReference>AutoTest01</ccl:customerPrimaryReference>\r\n      </ccl:GetShippingRequirement>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetShippingRequirements",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shippingRequirementIdOne = body.GetShippingRequirementsResponse.GetShippingRequirementsResult.DispatchAppShippingRequirementLookup[0].ShippingRequirementId;\r",
									"var shippingRequirementIdTwo = body.GetShippingRequirementsResponse.GetShippingRequirementsResult.DispatchAppShippingRequirementLookup[1].ShippingRequirementId;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShippingRequirements for AutoTest01\", function () {\r",
									"        pm.expect(shippingRequirementIdOne).to.eql(\"2024669\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShippingRequirements for AutoTest02\", function () {\r",
									"        pm.expect(shippingRequirementIdTwo).to.eql(\"2024671\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3764d554-a2a5-4e20-ae03-19668c2123e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetShippingRequirements\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetShippingRequirements>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:customerPrimaryReference>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:string>AutoTest01</ccl:string>\r\n         </ccl:customerPrimaryReference>\r\n         <ccl:customerPrimaryReference>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:string>AutoTest02</ccl:string>\r\n         </ccl:customerPrimaryReference>\r\n      </ccl:GetShippingRequirements>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetShippingRequirementsByShippingRequirementId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerPrimaryReference = body.GetShippingRequirementsByShippingRequirementIdResponse.GetShippingRequirementsByShippingRequirementIdResult.DispatchAppShippingRequirementLookup.CustomerPrimaryReference;\r",
									"\r",
									"var customerId = body.GetShippingRequirementsByShippingRequirementIdResponse.GetShippingRequirementsByShippingRequirementIdResult.DispatchAppShippingRequirementLookup.CustomerId;\r",
									"\r",
									"var shippingRequirementIdOne = body.GetShippingRequirementsByShippingRequirementIdResponse.GetShippingRequirementsByShippingRequirementIdResult.DispatchAppShippingRequirementLookup.ShippingRequirementId;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"CustomerPrimaryReference is AutoTEST01\", function () {\r",
									"        pm.expect(customerPrimaryReference).to.eql(\"AutoTest01\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 81314\", function () {\r",
									"        pm.expect(customerId).to.eql(\"81314\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShippingRequirementsID for AutoTest01 is 2024669\", function () {\r",
									"        pm.expect(shippingRequirementIdOne).to.eql(\"2024669\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d80f4bb3-ed13-49df-9c04-00821b5f3c13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetShippingRequirementsByShippingRequirementId\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetShippingRequirementsByShippingRequirementId>\r\n         <!--Optional:-->\r\n         <ccl:shippingRequirementIds>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:int>2024669</ccl:int>\r\n         </ccl:shippingRequirementIds>\r\n      </ccl:GetShippingRequirementsByShippingRequirementId>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetSignatureDocumentCollectionIdForSignatoryAndPosition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var signatureDocumentCollectionId = body.GetSignatureDocumentCollectionIdForSignatoryAndPositionResponse.GetSignatureDocumentCollectionIdForSignatoryAndPositionResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"signatureDocumentCollectionId is 3939489\", function () {\r",
									"        pm.expect(signatureDocumentCollectionId).to.eql(\"3939489\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c5ee19cd-a3a4-4f4c-81ad-489704440f25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetSignatureDocumentCollectionIdForSignatoryAndPosition\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetSignatureDocumentCollectionIdForSignatoryAndPosition>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:signatoryName>Mr Smith</ccl:signatoryName>\r\n         <!--Optional:-->\r\n         <ccl:signatoryPosition>Warehouse Manager</ccl:signatoryPosition>\r\n      </ccl:GetSignatureDocumentCollectionIdForSignatoryAndPosition>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "HasDailyCollection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8250d262-628b-49b5-a590-6b670fd55080",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var hasDailyCollection = body.HasDailyCollectionResponse.HasDailyCollectionResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Is Has Daily Collection True?\", function () {\r",
									"        pm.expect(hasDailyCollection).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0cb58a40-c8f0-4ac7-8f3f-8d351e31e6fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/HasDailyCollection\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:HasDailyCollection>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n         <ccl:supplierID>933</ccl:supplierID>\r\n         <!--Optional:-->\r\n         <ccl:postcode>KA2 0BA</ccl:postcode>\r\n      </ccl:HasDailyCollection>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "HasDailyCollectionFor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8250d262-628b-49b5-a590-6b670fd55080",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var hasDailyCollection = body.HasDailyCollectionForResponse.HasDailyCollectionForResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Is Has Daily Collection True?\", function () {\r",
									"        pm.expect(hasDailyCollection).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5595cfaf-8415-4c0d-a34f-c9c64423c0d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/HasDailyCollectionFor\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:HasDailyCollectionFor>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n         <ccl:supplierID>933</ccl:supplierID>\r\n         <!--Optional:-->\r\n         <ccl:user></ccl:user>\r\n      </ccl:HasDailyCollectionFor>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "HasDailyCollectionForPostcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb391b72-c2cc-4a33-af19-0b67c8f782e9",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var hasDailyCollection = body.HasDailyCollectionForPostcodeResponse.HasDailyCollectionForPostcodeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Is Has Daily Collection True?\", function () {\r",
									"        pm.expect(hasDailyCollection).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1f148c2e-19df-403d-8bf9-ee874ddd98c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/HasDailyCollectionForPostcode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:HasDailyCollectionForPostcode>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n         <ccl:supplierID>933</ccl:supplierID>\r\n         <!--Optional:-->\r\n         <ccl:postcode>KA2 0BA</ccl:postcode>\r\n      </ccl:HasDailyCollectionForPostcode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "HasDailyCollectionForPostcodeNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb391b72-c2cc-4a33-af19-0b67c8f782e9",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var hasDailyCollection = body.HasDailyCollectionForPostcodeResponse.HasDailyCollectionForPostcodeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Is Has Daily Collection False?\", function () {\r",
									"        pm.expect(hasDailyCollection).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7d5aa8cb-1667-4f64-a94d-9ad6ba0bfd2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/HasDailyCollectionForPostcode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:HasDailyCollectionForPostcode>\r\n         <ccl:customerID>81314</ccl:customerID>\r\n         <ccl:supplierID>933</ccl:supplierID>\r\n         <!--Optional:-->\r\n         <ccl:postcode>ML1 4GW</ccl:postcode>\r\n      </ccl:HasDailyCollectionForPostcode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "IsCommercialInvoiceAndIOSSRequired",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var movementType = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.MovementType;\r",
									"var isCommercialInvoiceAndIOSSRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IsCommercialInvoiceRequired;\r",
									"var isCollectionXIEoriRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsCollectionXIEoriRequired;\r",
									"var isDeliveryXIEoriRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsDeliveryXIEoriRequired;\r",
									"var isDeliveryToNorthernIreland = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsDeliveryToNorthernIreland;\r",
									"var isNICIDataOptional = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsNICIDataOptional;\r",
									"var IOSSRequirementsIsValid = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IOSSRequirements.IsValid;\r",
									"var IOSSRequirementsIsAllowed = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IOSSRequirements.IsAllowed;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"movementType is Export\", function () {\r",
									"        pm.expect(movementType).to.eql(\"Export\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isCommercialInvoiceAndIOSSRequired is set to true\", function () {\r",
									"        pm.expect(isCommercialInvoiceAndIOSSRequired).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCollectionXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isCollectionXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isDeliveryXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryToNorthernIreland is set to false\", function () {\r",
									"        pm.expect(isDeliveryToNorthernIreland).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsNICIDataOptional is set to false\", function () {\r",
									"        pm.expect(isNICIDataOptional).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsValid is set to true\", function () {\r",
									"        pm.expect(IOSSRequirementsIsValid).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsAllowed is set to true\", function () {\r",
									"        pm.expect(IOSSRequirementsIsAllowed).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "84c70415-0e52-40f5-83b7-4acf1fe803c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/IsCommercialInvoiceAndIOSSRequired\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsCommercialInvoiceAndIOSSRequired>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:collectionCountryCode>GB</ccl:collectionCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:collectionPostcode>KA2 0BA</ccl:collectionPostcode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryCountryCode>FR</ccl:deliveryCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryPostcode>81314</ccl:deliveryPostcode>\r\n         <!--Optional:-->\r\n         <ccl:shipmentTypeCode>1</ccl:shipmentTypeCode>\r\n         <!--Optional:-->\r\n         <ccl:iossCountryCode>FR</ccl:iossCountryCode>\r\n         <ccl:valueOfGoods>10</ccl:valueOfGoods>\r\n         <!--Optional:-->\r\n         <ccl:currency>GBP</ccl:currency>\r\n      </ccl:IsCommercialInvoiceAndIOSSRequired>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "IsCommercialInvoiceAndIOSSRequiredNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var movementType = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.MovementType;\r",
									"var isCommercialInvoiceAndIOSSRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IsCommercialInvoiceRequired;\r",
									"var isCollectionXIEoriRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsCollectionXIEoriRequired;\r",
									"var isDeliveryXIEoriRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsDeliveryXIEoriRequired;\r",
									"var isDeliveryToNorthernIreland = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsDeliveryToNorthernIreland;\r",
									"var isNICIDataOptional = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsNICIDataOptional;\r",
									"var IOSSRequirementsIsValid = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IOSSRequirements.IsValid;\r",
									"var IOSSRequirementsIsAllowed = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IOSSRequirements.IsAllowed;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"movementType is Domestic\", function () {\r",
									"        pm.expect(movementType).to.eql(\"Domestic\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isCommercialInvoiceAndIOSSRequired is set to false\", function () {\r",
									"        pm.expect(isCommercialInvoiceAndIOSSRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCollectionXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isCollectionXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isDeliveryXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryToNorthernIreland is set to false\", function () {\r",
									"        pm.expect(isDeliveryToNorthernIreland).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsNICIDataOptional is set to false\", function () {\r",
									"        pm.expect(isNICIDataOptional).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsValid is set to false\", function () {\r",
									"        pm.expect(IOSSRequirementsIsValid).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsAllowed is set to false\", function () {\r",
									"        pm.expect(IOSSRequirementsIsAllowed).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "49ce4dbc-c68f-4a9e-8170-08589c707438",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/IsCommercialInvoiceAndIOSSRequired\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsCommercialInvoiceAndIOSSRequired>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:collectionCountryCode>GB</ccl:collectionCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:collectionPostcode>KA2 0BA</ccl:collectionPostcode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryCountryCode>GB</ccl:deliveryCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryPostcode>ML1 4GW</ccl:deliveryPostcode>\r\n         <!--Optional:-->\r\n         <ccl:shipmentTypeCode>1</ccl:shipmentTypeCode>\r\n         <!--Optional:-->\r\n         <ccl:iossCountryCode></ccl:iossCountryCode>\r\n         <ccl:valueOfGoods>10</ccl:valueOfGoods>\r\n         <!--Optional:-->\r\n         <ccl:currency>GBP</ccl:currency>\r\n      </ccl:IsCommercialInvoiceAndIOSSRequired>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "IsCommercialInvoiceAndIOSSRequiredNI",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var movementType = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.MovementType;\r",
									"var isCommercialInvoiceAndIOSSRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IsCommercialInvoiceRequired;\r",
									"var isCollectionXIEoriRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsCollectionXIEoriRequired;\r",
									"var isDeliveryXIEoriRequired = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsDeliveryXIEoriRequired;\r",
									"var isDeliveryToNorthernIreland = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsDeliveryToNorthernIreland;\r",
									"var isNICIDataOptional = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.XIEoriRequirements.IsNICIDataOptional;\r",
									"var IOSSRequirementsIsValid = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IOSSRequirements.IsValid;\r",
									"var IOSSRequirementsIsAllowed = body.IsCommercialInvoiceAndIOSSRequiredResponse.IsCommercialInvoiceAndIOSSRequiredResult.IOSSRequirements.IsAllowed;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"movementType is Export\", function () {\r",
									"        pm.expect(movementType).to.eql(\"Export\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isCommercialInvoiceAndIOSSRequired is set to true\", function () {\r",
									"        pm.expect(isCommercialInvoiceAndIOSSRequired).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCollectionXIEoriRequired is set to true\", function () {\r",
									"        pm.expect(isCollectionXIEoriRequired).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isDeliveryXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryToNorthernIreland is set to true\", function () {\r",
									"        pm.expect(isDeliveryToNorthernIreland).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsNICIDataOptional is set to true\", function () {\r",
									"        pm.expect(isNICIDataOptional).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsValid is set to true\", function () {\r",
									"        pm.expect(IOSSRequirementsIsValid).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsAllowed is set to true\", function () {\r",
									"        pm.expect(IOSSRequirementsIsAllowed).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a1ebbe89-64fa-40d7-bf69-9635738c58b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/IsCommercialInvoiceAndIOSSRequired\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsCommercialInvoiceAndIOSSRequired>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:collectionCountryCode>GB</ccl:collectionCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:collectionPostcode>KA2 0BA</ccl:collectionPostcode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryCountryCode>GB</ccl:deliveryCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryPostcode>BT1 4AR</ccl:deliveryPostcode>\r\n         <!--Optional:-->\r\n         <ccl:shipmentTypeCode>1</ccl:shipmentTypeCode>\r\n         <!--Optional:-->\r\n         <ccl:iossCountryCode></ccl:iossCountryCode>\r\n         <ccl:valueOfGoods>10</ccl:valueOfGoods>\r\n         <!--Optional:-->\r\n         <ccl:currency>GBP</ccl:currency>\r\n      </ccl:IsCommercialInvoiceAndIOSSRequired>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "IsCommercialInvoiceRequired",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var MovementType = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.MovementType;\r",
									"var IsCommercialInvoiceRequired = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IsCommercialInvoiceRequired;\r",
									"var isCollectionXIEoriRequired = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsCollectionXIEoriRequired;\r",
									"var isDeliveryXIEoriRequired = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsDeliveryXIEoriRequired;\r",
									"var isDeliveryToNorthernIreland = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsDeliveryToNorthernIreland;\r",
									"var isNICIDataOptional = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsNICIDataOptional;\r",
									"var ErrorMessage = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IOSSRequirements.ErrorMessage;\r",
									"var IOSSRequirementsIsValid = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IOSSRequirements.IsValid;\r",
									"var IOSSRequirementsIsAllowed = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IOSSRequirements.IsAllowed;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"MovementType is set to Export\", function () {\r",
									"        pm.expect(MovementType).to.eql(\"Export\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCommercialInvoiceRequired is set to true\", function () {\r",
									"        pm.expect(IsCommercialInvoiceRequired).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCollectionXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isCollectionXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isDeliveryXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryToNorthernIreland is set to false\", function () {\r",
									"        pm.expect(isDeliveryToNorthernIreland).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsNICIDataOptional is set to false\", function () {\r",
									"        pm.expect(isNICIDataOptional).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ErrorMessage is A value of goods must be provided for IOSS orders\", function () {\r",
									"        pm.expect(ErrorMessage).to.eql(\"A value of goods must be provided for IOSS orders\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsValid is set to false\", function () {\r",
									"        pm.expect(IOSSRequirementsIsValid).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsAllowed is set to true\", function () {\r",
									"        pm.expect(IOSSRequirementsIsAllowed).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bd3a79bc-384a-48f2-9d80-48b588953c67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/IsCommercialInvoiceRequired\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsCommercialInvoiceRequired>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:collectionCountryCode>GB</ccl:collectionCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:collectionPostcode>KA2 0BA</ccl:collectionPostcode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryCountryCode>FR</ccl:deliveryCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryPostcode>75018</ccl:deliveryPostcode>\r\n         <!--Optional:-->\r\n         <ccl:shipmentTypeCode>1</ccl:shipmentTypeCode>\r\n      </ccl:IsCommercialInvoiceRequired>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "IsCommercialInvoiceRequiredNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var MovementType = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.MovementType;\r",
									"var IsCommercialInvoiceRequired = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IsCommercialInvoiceRequired;\r",
									"var isCollectionXIEoriRequired = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsCollectionXIEoriRequired;\r",
									"var isDeliveryXIEoriRequired = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsDeliveryXIEoriRequired;\r",
									"var isDeliveryToNorthernIreland = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsDeliveryToNorthernIreland;\r",
									"var isNICIDataOptional = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.XIEoriRequirements.IsNICIDataOptional;\r",
									"var ErrorMessage = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IOSSRequirements.ErrorMessage;\r",
									"var IOSSRequirementsIsValid = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IOSSRequirements.IsValid;\r",
									"var IOSSRequirementsIsAllowed = body.IsCommercialInvoiceRequiredResponse.IsCommercialInvoiceRequiredResult.IOSSRequirements.IsAllowed;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"MovementType is set to Domestic\", function () {\r",
									"        pm.expect(MovementType).to.eql(\"Domestic\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCommercialInvoiceRequired is set to true\", function () {\r",
									"        pm.expect(IsCommercialInvoiceRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCollectionXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isCollectionXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryXIEoriRequired is set to false\", function () {\r",
									"        pm.expect(isDeliveryXIEoriRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsDeliveryToNorthernIreland is set to false\", function () {\r",
									"        pm.expect(isDeliveryToNorthernIreland).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsNICIDataOptional is set to false\", function () {\r",
									"        pm.expect(isNICIDataOptional).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ErrorMessage is IOSS is not valid for the requested collection and delivery locations\", function () {\r",
									"        pm.expect(ErrorMessage).to.eql(\"IOSS is not valid for the requested collection and delivery locations\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsValid is set to false\", function () {\r",
									"        pm.expect(IOSSRequirementsIsValid).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSRequirementsIsAllowed is set to false\", function () {\r",
									"        pm.expect(IOSSRequirementsIsAllowed).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8e3bad32-370d-409e-a7cb-05a52d83e8a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/IsCommercialInvoiceRequired\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsCommercialInvoiceRequired>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:collectionCountryCode>GB</ccl:collectionCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:collectionPostcode>KA2 0BA</ccl:collectionPostcode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryCountryCode>GB</ccl:deliveryCountryCode>\r\n         <!--Optional:-->\r\n         <ccl:deliveryPostcode>ML1 4GW</ccl:deliveryPostcode>\r\n         <!--Optional:-->\r\n         <ccl:shipmentTypeCode>1</ccl:shipmentTypeCode>\r\n      </ccl:IsCommercialInvoiceRequired>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "ResolveInternationalMovementRecord",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var isValid = body.ResolveInternationalMovementRecordResponse.ResolveInternationalMovementRecordResult.IsValid;\r",
									"var isRequired = body.ResolveInternationalMovementRecordResponse.ResolveInternationalMovementRecordResult.IsRequired;\r",
									"var eoriNumber = body.ResolveInternationalMovementRecordResponse.ResolveInternationalMovementRecordResult.InternationalMovement.ShipFrom.Eori;\r",
									"var IOSSAuthorised = body.ResolveInternationalMovementRecordResponse.ResolveInternationalMovementRecordResult.InternationalMovement.IOSSAuthorised;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isValid is true\", function () {\r",
									"        pm.expect(isValid).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isRequired is true\", function () {\r",
									"        pm.expect(isRequired).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"eoriNumber is XI12345678\", function () {\r",
									"        pm.expect(eoriNumber).to.eql(\"XI12345678\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IOSSAuthorised is false\", function () {\r",
									"        pm.expect(IOSSAuthorised).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "50a4d428-1c27-4f9b-a068-82523d161356",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/ResolveInternationalMovementRecord\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n<soapenv:Header/>\r\n<soapenv:Body>\r\n<ccl:ResolveInternationalMovementRecord>\r\n<ccl:customerId>81314</ccl:customerId>\r\n<ccl:collectionAddress>\r\n<ccl:Id>0</ccl:Id>\r\n<ccl:Postcode>KA2 0BA</ccl:Postcode>\r\n<ccl:Country>\r\n<ccl:Code>GB</ccl:Code>\r\n<ccl:VatRate>0</ccl:VatRate>\r\n<ccl:IsEuMember>0</ccl:IsEuMember>\r\n<ccl:European>1</ccl:European>\r\n</ccl:Country>\r\n<ccl:AddressType>Residential</ccl:AddressType>\r\n</ccl:collectionAddress>\r\n<ccl:deliveryAddress>\r\n<ccl:Id>0</ccl:Id>\r\n<ccl:Postcode>BT1 1DY</ccl:Postcode>\r\n<ccl:Country>\r\n<ccl:Code>GB</ccl:Code>\r\n<ccl:VatRate>0</ccl:VatRate>\r\n<ccl:IsEuMember>0</ccl:IsEuMember>\r\n<ccl:European>1</ccl:European>\r\n</ccl:Country>\r\n<ccl:AddressType>Residential</ccl:AddressType>\r\n</ccl:deliveryAddress>\r\n</ccl:ResolveInternationalMovementRecord>\r\n</soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "SendSetupEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12d3faec-7bb3-4363-b50b-e63d2bb44321",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{basicAuthPw}}",
								"username": "{{basicAuthUsername}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/SendSetupEmail\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:SendSetupEmail>\r\n         <!--Optional:-->\r\n         <ccl:user>\r\n            <ccl:Id>6403</ccl:Id>\r\n            <!--Optional:-->\r\n            <ccl:Title>Mr</ccl:Title>\r\n            <!--Optional:-->\r\n            <ccl:FirstName>IWS</ccl:FirstName>\r\n            <!--Optional:-->\r\n            <ccl:LastName>Test</ccl:LastName>\r\n            <!--Optional:-->\r\n            <ccl:Username>sheptinstall@ccl-logistics.com</ccl:Username>\r\n         </ccl:user>\r\n      </ccl:SendSetupEmail>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{urlAuth}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "AddCustomerCreditPosition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerId = body.AddCustomerCreditPositionResponse.AddCustomerCreditPositionResult;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Method returns customer ID\", function () {\r",
									"        pm.expect(customerId).to.eql(\"71761\");\r",
									"    });\r",
									"}\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34394c74-a2d7-4d20-b09e-86a88e712dc6",
								"exec": [
									"var moment = new Date;\r",
									"\r",
									"pm.environment.set('currentdate', moment.toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "090332e2-ca7a-4f59-bb33-a80185612a1a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/AddCustomerCreditPosition\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:AddCustomerCreditPosition>\r\n         <!--Optional:-->\r\n         <ccl:AccountNo>71761</ccl:AccountNo>\r\n         <!--Optional:-->\r\n         <ccl:CustomerName>Test Customer: Protractor UI Testing Customer</ccl:CustomerName>\r\n         <ccl:CreditLimit>120.00</ccl:CreditLimit>\r\n         <ccl:CurrentBalance>13.00</ccl:CurrentBalance>\r\n         <ccl:AccountOpened>{{currentdate}}</ccl:AccountOpened>\r\n         <ccl:branchId>1</ccl:branchId>\r\n      </ccl:AddCustomerCreditPosition>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{customerService}}"
					},
					"response": []
				}
			],
			"id": "b5df9970-1df8-40c3-aba0-a6c87955a058",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ea93d6a5-cba6-47b3-a602-efe45862cb36",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0aa37bd5-1017-4232-b0ac-e0411857baf5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "CustomerNetworkRestrictions",
			"item": [
				{
					"name": "GetForCustomerAndNetwork",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc5e46da-2244-4058-9c7d-bbf9a5f36bd2",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerNetworkRestrictionId = body.GetForCustomerAndNetworkResponse.GetForCustomerAndNetworkResult.CustomerNetworkRestrictionId;\r",
									"var networkId = body.GetForCustomerAndNetworkResponse.GetForCustomerAndNetworkResult.NetworkId;\r",
									"var upperLimit = body.GetForCustomerAndNetworkResponse.GetForCustomerAndNetworkResult.UpperLimit;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"customerNetworkRestrictionId is 1\", function () {\r",
									"        pm.expect(customerNetworkRestrictionId).to.eql(\"1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"networkId is 1\", function () {\r",
									"        pm.expect(networkId).to.eql(\"1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"upperLimit is 10\", function () {\r",
									"        pm.expect(upperLimit).to.eql(\"10\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11bdd523-bb51-4b5c-b2ac-d1140d15bbdc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetForCustomerAndNetwork\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetForCustomerAndNetwork>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n         <ccl:networkId>1</ccl:networkId>\r\n      </ccl:GetForCustomerAndNetwork>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{customerNetworkRestrictionsService}}"
					},
					"response": []
				}
			],
			"id": "985fbdcf-34a5-4a25-89d2-f68089524734"
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "BuyerOrderTrackingDataById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a32b8eef-6527-49ac-9c2a-ca78c7cc05a5",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.OrderID;\r",
									"var customerId = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.CustomerID;\r",
									"var stateHistoryCodeOne = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.StateHistories.StateHistory[0].Code;\r",
									"var stateHistoryTimestampOne = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.StateHistories.StateHistory[0].Timestamp;\r",
									"var stateHistoryCodeTwo = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.StateHistories.StateHistory[1].Code;\r",
									"var stateHistoryTimestampTwo = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.StateHistories.StateHistory[1].Timestamp;\r",
									"var completed = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.Completed;\r",
									"var supplierId = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.Supplier.ID;\r",
									"var supplierName = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.Supplier.Name;\r",
									"var descriptionOfGoods = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.DescriptionOfGoods;\r",
									"var shippingRefOne = body.GetBuyerOrderTrackingDataByIdResponse.GetBuyerOrderTrackingDataByIdResult.ShippingReference1;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order ID is 7478482\", function () {\r",
									"        pm.expect(orderId).to.eql(\"7478482\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 28037\", function () {\r",
									"        pm.expect(customerId).to.eql(\"28037\");\r",
									"    });\r",
									"\r",
									"pm.test(\"stateHistoryCodeOne is COLLECTED\", function () {\r",
									"        pm.expect(stateHistoryCodeOne).to.eql(\"COLLECTED\");\r",
									"    });\r",
									"\r",
									"pm.test(\"stateHistoryTimestampOne is 2021-02-13T21:23:44.6033333\", function () {\r",
									"        pm.expect(stateHistoryTimestampOne).to.eql(\"2021-02-13T21:23:44.6033333\");\r",
									"    });\r",
									"\r",
									"pm.test(\"stateHistoryCodeTwo is DELIVERED\", function () {\r",
									"        pm.expect(stateHistoryCodeTwo).to.eql(\"DELIVERED\");\r",
									"    });\r",
									"\r",
									"pm.test(\"stateHistoryTimestampTwo is 2021-02-15T11:44:15.2433333\", function () {\r",
									"        pm.expect(stateHistoryTimestampTwo).to.eql(\"2021-02-15T11:44:15.2433333\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Completed is true?\", function () {\r",
									"        pm.expect(completed).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 25453?\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"25453\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier Name is DX Freight?\", function () {\r",
									"        pm.expect(supplierName).to.eql(\"DX Freight\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Description Of Goods is Wallet?\", function () {\r",
									"        pm.expect(descriptionOfGoods).to.eql(\"Wallet\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShippingReference1 is REF1234567890RE?\", function () {\r",
									"        pm.expect(shippingRefOne).to.eql(\"REF1234567890RE\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a04bf585-ebff-432f-ad76-184ae0dbeff9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetBuyerOrderTrackingDataById\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetBuyerOrderTrackingDataById>\r\n         <ccl:orderId>7478482</ccl:orderId>\r\n      </ccl:GetBuyerOrderTrackingDataById>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetLatestSupplierTrackingAuditForEachSupplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a32b8eef-6527-49ac-9c2a-ca78c7cc05a5",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var auditArray = body.GetLatestSupplierTrackingAuditForEachSupplierResponse.GetLatestSupplierTrackingAuditForEachSupplierResult.SupplierTrackingAudit;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Supplier audits are returned\", function() {\r",
									"    pm.expect(auditArray.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"No duplicate supplier audits\", function() {\r",
									"    var allSupplierIds = auditArray.map(audit => audit.SupplierId);\r",
									"    var distinctSupplierIds = new Set(allSupplierIds);\r",
									"\r",
									"    pm.expect(allSupplierIds.length).to.eql(distinctSupplierIds.size);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of suppliers is more than 7\", function() {\r",
									"    var allSupplierIds = auditArray.map(audit => audit.SupplierId);\r",
									"    pm.expect(allSupplierIds.length).to.be.above(7);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56cefa6d-e0af-428d-b424-9fdb0c7b993e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetLatestSupplierTrackingAuditForEachSupplier\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetDetailsResponse.SalesOrder.Id;\r",
									"var customerId = body.GetDetailsResponse.SalesOrder.CustomerID;\r",
									"var trackingId = body.GetDetailsResponse.SalesOrder.TrackingID;\r",
									"var trackingNumber = body.GetDetailsResponse.SalesOrder.TrackingNumber;\r",
									"var isInvoiced = body.GetDetailsResponse.SalesOrder.IsInvoiced;\r",
									"var isCancelled = body.GetDetailsResponse.SalesOrder.IsCancelled;\r",
									"var deliveryAddressId = body.GetDetailsResponse.SalesOrder.DeliveryAddress.Id;\r",
									"var contactName = body.GetDetailsResponse.SalesOrder.DeliveryAddress.ContactName;\r",
									"var addressLineOne = body.GetDetailsResponse.SalesOrder.DeliveryAddress.AddressLine1;\r",
									"var addressLineTwo = body.GetDetailsResponse.SalesOrder.DeliveryAddress.AddressLine2;\r",
									"var town = body.GetDetailsResponse.SalesOrder.DeliveryAddress.Town;\r",
									"var postcode = body.GetDetailsResponse.SalesOrder.DeliveryAddress.Postcode;\r",
									"var collectionAddressId = body.GetDetailsResponse.SalesOrder.CollectionAddress.Id;\r",
									"var collectionAddressContactName = body.GetDetailsResponse.SalesOrder.CollectionAddress.ContactName;\r",
									"var collectionAddressLineOne = body.GetDetailsResponse.SalesOrder.CollectionAddress.AddressLine1;\r",
									"var collectionAddressPostcode = body.GetDetailsResponse.SalesOrder.CollectionAddress.Postcode;\r",
									"var collectionAddressCountry = body.GetDetailsResponse.SalesOrder.CollectionAddress.Country.Name;\r",
									"var collectAddressId = body.GetDetailsResponse.SalesOrder.CollectAddressID;\r",
									"var deliveryAddressId = body.GetDetailsResponse.SalesOrder.DeliveryAddressID;\r",
									"var supplierId = body.GetDetailsResponse.SalesOrder.SupplierID;\r",
									"var serviceId = body.GetDetailsResponse.SalesOrder.ServiceID;\r",
									"var shipmentTypeId = body.GetDetailsResponse.SalesOrder.ShipmentTypeID;\r",
									"var suppliersName = body.GetDetailsResponse.SalesOrder.SuppliersName;\r",
									"\r",
									"pm.variables.set(\"orderId\", orderId);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order ID is 9101574\", function () {\r",
									"        pm.expect(orderId).to.eql(\"9101574\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Tracking ID is 8259545\", function () {\r",
									"        pm.expect(trackingId).to.eql(\"8259545\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 75759\", function () {\r",
									"        pm.expect(customerId).to.eql(\"75759\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Tracking Number is 15501670004650\", function () {\r",
									"        pm.expect(trackingNumber).to.eql(\"15501670004650\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsInvoiced is false\", function () {\r",
									"        pm.expect(isInvoiced).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCancelled is true\", function () {\r",
									"        pm.expect(isCancelled).to.eql(\"true\");  \r",
									"    });\r",
									"\r",
									"pm.test(\"Delivery Address Id is 4365143\", function () {\r",
									"        pm.expect(deliveryAddressId).to.eql(\"4365143\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Contact Name is Test Company\", function () {\r",
									"        pm.expect(contactName).to.eql(\"Test Company\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is UNIT 11\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"UNIT 11\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 2 is HALIFAX IND CENTRE\", function () {\r",
									"        pm.expect(addressLineTwo).to.eql(\"HALIFAX IND CENTRE\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is PELLON LANE\", function () {\r",
									"        pm.expect(town).to.eql(\"PELLON LANE\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is HX1 5RW\", function () {\r",
									"        pm.expect(postcode).to.eql(\"HX1 5RW\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address ID is 3055812\", function () {\r",
									"        pm.expect(collectionAddressId).to.eql(\"3055812\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Contact Name is Test Customer: Protractor UI Testing Customer\", function () {\r",
									"        pm.expect(collectionAddressContactName).to.eql(\"Test Customer: Protractor UI Testing Customer\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Line One is Test Line1\", function () {\r",
									"        pm.expect(collectionAddressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Postcode is KA2 0BA\", function () {\r",
									"        pm.expect(collectionAddressPostcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Country is United Kingdom\", function () {\r",
									"        pm.expect(collectionAddressCountry).to.eql(\"United Kingdom\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collect Address ID is 3055812\", function () {\r",
									"        pm.expect(collectAddressId).to.eql(\"3055812\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Delivery Address ID is 4365143\", function () {\r",
									"        pm.expect(deliveryAddressId).to.eql(\"4365143\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 933\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"933\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Service ID is 200\", function () {\r",
									"        pm.expect(serviceId).to.eql(\"200\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Shipment Type ID is 21\", function () {\r",
									"        pm.expect(shipmentTypeId).to.eql(\"21\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Suppliers Name ID is DPD\", function () {\r",
									"        pm.expect(suppliersName).to.eql(\"DPD\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "63349215-1571-428e-8c38-7fac74dc04eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetDetails\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetDetails>\r\n         <ccl:orderId>9101574</ccl:orderId>\r\n      </ccl:GetDetails>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetDetailsByTrackingReference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d1dbdaa-be3e-4c18-a040-6da579ad6abe",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.Id;\r",
									"var customerId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.CustomerID;\r",
									"var trackingId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.TrackingID;\r",
									"var trackingNumber = body.GetDetailsByTrackingReferenceResponse.SalesOrder.TrackingNumber;\r",
									"var isInvoiced = body.GetDetailsByTrackingReferenceResponse.SalesOrder.IsInvoiced;\r",
									"var isCancelled = body.GetDetailsByTrackingReferenceResponse.SalesOrder.IsCancelled;\r",
									"var deliveryAddressId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.DeliveryAddress.Id;\r",
									"var contactName = body.GetDetailsByTrackingReferenceResponse.SalesOrder.DeliveryAddress.ContactName;\r",
									"var addressLineOne = body.GetDetailsByTrackingReferenceResponse.SalesOrder.DeliveryAddress.AddressLine1;\r",
									"var addressLineTwo = body.GetDetailsByTrackingReferenceResponse.SalesOrder.DeliveryAddress.AddressLine2;\r",
									"var town = body.GetDetailsByTrackingReferenceResponse.SalesOrder.DeliveryAddress.Town;\r",
									"var postcode = body.GetDetailsByTrackingReferenceResponse.SalesOrder.DeliveryAddress.Postcode;\r",
									"var collectionAddressId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.CollectionAddress.Id;\r",
									"var collectionAddressContactName = body.GetDetailsByTrackingReferenceResponse.SalesOrder.CollectionAddress.ContactName;\r",
									"var collectionAddressLineOne = body.GetDetailsByTrackingReferenceResponse.SalesOrder.CollectionAddress.AddressLine1;\r",
									"var collectionAddressPostcode = body.GetDetailsByTrackingReferenceResponse.SalesOrder.CollectionAddress.Postcode;\r",
									"var collectionAddressCountry = body.GetDetailsByTrackingReferenceResponse.SalesOrder.CollectionAddress.Country.Name;\r",
									"var collectAddressId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.CollectAddressID;\r",
									"var deliveryAddressId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.DeliveryAddressID;\r",
									"var supplierId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.SupplierID;\r",
									"var serviceId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.ServiceID;\r",
									"var shipmentTypeId = body.GetDetailsByTrackingReferenceResponse.SalesOrder.ShipmentTypeID;\r",
									"var suppliersName = body.GetDetailsByTrackingReferenceResponse.SalesOrder.SuppliersName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order ID is 8199100\", function () {\r",
									"        pm.expect(orderId).to.eql(\"8199100\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 75759\", function () {\r",
									"        pm.expect(customerId).to.eql(\"75759\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Tracking ID is 7576110\", function () {\r",
									"        pm.expect(trackingId).to.eql(\"7576110\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Tracking Number is 15501670004407\", function () {\r",
									"        pm.expect(trackingNumber).to.eql(\"15501670004407\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsInvoiced is false\", function () {\r",
									"        pm.expect(isInvoiced).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCancelled is true\", function () {\r",
									"        pm.expect(isCancelled).to.eql(\"true\");  \r",
									"    });\r",
									"\r",
									"pm.test(\"Delivery Address Id is 4442999\", function () {\r",
									"        pm.expect(deliveryAddressId).to.eql(\"4442999\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Contact Name is UK Test Company\", function () {\r",
									"        pm.expect(contactName).to.eql(\"UK Test Company\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is Test line 1\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"Test line 1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 2 is Test line 2\", function () {\r",
									"        pm.expect(addressLineTwo).to.eql(\"Test line 2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is London\", function () {\r",
									"        pm.expect(town).to.eql(\"London\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is NW1 4SA\", function () {\r",
									"        pm.expect(postcode).to.eql(\"NW1 4SA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address ID is 3055812\", function () {\r",
									"        pm.expect(collectionAddressId).to.eql(\"3055812\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Contact Name is Test Customer: Protractor UI Testing Customer\", function () {\r",
									"        pm.expect(collectionAddressContactName).to.eql(\"Test Customer: Protractor UI Testing Customer\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Line One is Test Line1\", function () {\r",
									"        pm.expect(collectionAddressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Postcode is KA2 0BA\", function () {\r",
									"        pm.expect(collectionAddressPostcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Country is United Kingdom\", function () {\r",
									"        pm.expect(collectionAddressCountry).to.eql(\"United Kingdom\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collect Address ID is 3055812\", function () {\r",
									"        pm.expect(collectAddressId).to.eql(\"3055812\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Delivery Address ID is 4442999\", function () {\r",
									"        pm.expect(deliveryAddressId).to.eql(\"4442999\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 933\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"933\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Service ID is 200\", function () {\r",
									"        pm.expect(serviceId).to.eql(\"200\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Shipment Type ID is 21\", function () {\r",
									"        pm.expect(shipmentTypeId).to.eql(\"21\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Suppliers Name ID is DPD\", function () {\r",
									"        pm.expect(suppliersName).to.eql(\"DPD\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "89f0026a-2761-44ca-baa5-332f8f814ba3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetDetailsByTrackingReference\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetDetailsByTrackingReference>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:trackingReference>15501670004407</ccl:trackingReference>\r\n      </ccl:GetDetailsByTrackingReference>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetDetailsForCustomerIdAndPurchaseOrderNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fac4426-ff83-4186-988e-2dab3f61c6a9",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.Id;\r",
									"var customerId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.CustomerID;\r",
									"var trackingId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.TrackingID;\r",
									"var trackingNumber = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.TrackingNumber;\r",
									"var isInvoiced = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.IsInvoiced;\r",
									"var isCancelled = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.IsCancelled;\r",
									"var deliveryAddressId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.DeliveryAddress.Id;\r",
									"var contactName = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.DeliveryAddress.ContactName;\r",
									"var addressLineOne = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.DeliveryAddress.AddressLine1;\r",
									"var addressLineTwo = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.DeliveryAddress.AddressLine2;\r",
									"var town = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.DeliveryAddress.Town;\r",
									"var postcode = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.DeliveryAddress.Postcode;\r",
									"var collectionAddressId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.CollectionAddress.Id;\r",
									"var collectionAddressContactName = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.CollectionAddress.ContactName;\r",
									"var collectionAddressLineOne = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.CollectionAddress.AddressLine1;\r",
									"var collectionAddressPostcode = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.CollectionAddress.Postcode;\r",
									"var collectionAddressCountry = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.CollectionAddress.Country.Name;\r",
									"var collectAddressId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.CollectAddressID;\r",
									"var deliveryAddressId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.DeliveryAddressID;\r",
									"var supplierId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.SupplierID;\r",
									"var serviceId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.ServiceID;\r",
									"var shipmentTypeId = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.ShipmentTypeID;\r",
									"var suppliersName = body.GetDetailsForCustomerIdAndPurchaseOrderNoResponse.SalesOrder.SuppliersName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order ID is 9523609\", function () {\r",
									"        pm.expect(orderId).to.eql(\"9523609\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 81314\", function () {\r",
									"        pm.expect(customerId).to.eql(\"81314\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Tracking ID is 8568430\", function () {\r",
									"        pm.expect(trackingId).to.eql(\"8568430\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Tracking Number is FakeTracking1\", function () {\r",
									"        pm.expect(trackingNumber).to.eql(\"FakeTracking1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsInvoiced is false\", function () {\r",
									"        pm.expect(isInvoiced).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsCancelled is true\", function () {\r",
									"        pm.expect(isCancelled).to.eql(\"true\");  \r",
									"    });\r",
									"\r",
									"pm.test(\"Delivery Address Id is 2960096\", function () {\r",
									"        pm.expect(deliveryAddressId).to.eql(\"2960096\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Contact Name is 1\", function () {\r",
									"        pm.expect(contactName).to.eql(\"1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Address Line 1 is 5/1 101 Townhead Street\", function () {\r",
									"        pm.expect(addressLineOne).to.eql(\"5/1 101 Townhead Street\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Town is Hamilton\", function () {\r",
									"        pm.expect(town).to.eql(\"Hamilton\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Postcode is ML3 7BX\", function () {\r",
									"        pm.expect(postcode).to.eql(\"ML3 7BX\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address ID is 5516090\", function () {\r",
									"        pm.expect(collectionAddressId).to.eql(\"5516090\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Contact Name is Test Customer: Webservices Test Customer\", function () {\r",
									"        pm.expect(collectionAddressContactName).to.eql(\"Test Customer: Webservices Test Customer\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Line One is Test Line1\", function () {\r",
									"        pm.expect(collectionAddressLineOne).to.eql(\"Test Line1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Postcode is KA2 0BA\", function () {\r",
									"        pm.expect(collectionAddressPostcode).to.eql(\"KA2 0BA\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collection Address Country is United Kingdom\", function () {\r",
									"        pm.expect(collectionAddressCountry).to.eql(\"United Kingdom\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Collect Address ID is 5516090\", function () {\r",
									"        pm.expect(collectAddressId).to.eql(\"5516090\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Delivery Address ID is 2960096\", function () {\r",
									"        pm.expect(deliveryAddressId).to.eql(\"2960096\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 1761\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"1761\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Service ID is 2\", function () {\r",
									"        pm.expect(serviceId).to.eql(\"2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Shipment Type ID is 2\", function () {\r",
									"        pm.expect(shipmentTypeId).to.eql(\"2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Suppliers Name ID is Tuffnells\", function () {\r",
									"        pm.expect(suppliersName).to.eql(\"Tuffnells\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "64f0cb5b-2107-4f53-8813-73cc8bd3fad0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetDetailsForCustomerIdAndPurchaseOrderNo\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n    <soapenv:Header/>\r\n    <soapenv:Body>\r\n        <ccl:GetDetailsForCustomerIdAndPurchaseOrderNo>\r\n            <ccl:customerId>81314</ccl:customerId>\r\n            <!--Optional:-->\r\n            <ccl:purchaseOrderNo>FAKE_CPR_NOT_REAL</ccl:purchaseOrderNo>\r\n        </ccl:GetDetailsForCustomerIdAndPurchaseOrderNo>\r\n    </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetFeedbackData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00771f77-eed6-4dc3-bf2c-9fbdc6addffe",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"\r",
									"var feedback = undefined;\r",
									"\r",
									"body.GetFeedbackDataResponse.GetFeedbackDataResult.Feedback.FeedbackModel.forEach(function(element){\r",
									"\r",
									"    if(element.OrderStateCode === 'CREATED' && element.Rating == 4){\r",
									"        feedback = element;\r",
									"    }\r",
									"\r",
									"})\r",
									"\r",
									"pm.expect(feedback).to.not.eql(null)\r",
									"\r",
									"var orderFound = body.GetFeedbackDataResponse.GetFeedbackDataResult.OrderFound;\r",
									"var orderStateCode = feedback.OrderStateCode;\r",
									"var rating = feedback.Rating;\r",
									"var comments = feedback.Comments;\r",
									"var timestamp = feedback.Timestamp;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Orders successfully returned?\", function() {\r",
									"var jsonData = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"pm.expect(jsonData.GetFeedbackDataResponse.GetFeedbackDataResult.Feedback.FeedbackModel[1].OrderStateCode).not.eq(undefined);\r",
									"});\r",
									"\r",
									"pm.test(\"orderFound is true\", function () {\r",
									"        pm.expect(orderFound).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"orderStateCode is CREATED\", function () {\r",
									"        pm.expect(orderStateCode).to.eql(\"CREATED\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Rating is 4\", function () {\r",
									"        pm.expect(rating).to.eql(\"4\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Comments is The cat remains traumatised, but will recover\", function () {\r",
									"        pm.expect(comments).to.eql(\"The cat remains traumatised, but will recover\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Timestamp is 2022-05-04T14:14:36.38\", function () {\r",
									"        pm.expect(timestamp).to.eql(\"2022-05-04T14:14:36.38\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "62ddfa7d-101f-49b0-adb9-a4c3853d8dca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetFeedbackData\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetFeedbackData>\r\n         <ccl:orderGuid>16C71A6D-56F2-479B-96BB-07617397F08F</ccl:orderGuid>\r\n      </ccl:GetFeedbackData>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetBuyerOrderTrackingDataTuffnells",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09b24561-2edb-49cc-b150-2ca9d909e5e3",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.OrderID;\r",
									"var customerId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.CustomerID;\r",
									"var stateHistoryCodeOne = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.StateHistories.StateHistory.Code;\r",
									"var stateHistoryTimestampOne = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.StateHistories.StateHistory.Timestamp;\r",
									"var completed = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Completed;\r",
									"var supplierId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.ID;\r",
									"var supplierName = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.Name;\r",
									"var shippingRefOne = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.ShippingReference1;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order ID is 9523609\", function () {\r",
									"        pm.expect(orderId).to.eql(\"9523609\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 81314\", function () {\r",
									"        pm.expect(customerId).to.eql(\"81314\");\r",
									"    });\r",
									"\r",
									"pm.test(\"stateHistoryCodeOne is COLLECTED\", function () {\r",
									"        pm.expect(stateHistoryCodeOne).to.eql(\"CREATED\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Completed is false?\", function () {\r",
									"        pm.expect(completed).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 1761?\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"1761\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier Name is Tuffnells?\", function () {\r",
									"        pm.expect(supplierName).to.eql(\"Tuffnells\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShippingReference1 is FAKE_CPR_NOT_REAL?\", function () {\r",
									"        pm.expect(shippingRefOne).to.eql(\"FAKE_CPR_NOT_REAL\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "783e36ea-c6bb-410e-a608-bfc9f6babde9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetBuyerOrderTrackingData\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetBuyerOrderTrackingData>\r\n         <ccl:orderGuid>16C71A6D-56F2-479B-96BB-07617397F08F</ccl:orderGuid>\r\n      </ccl:GetBuyerOrderTrackingData>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetBuyerOrderTrackingDataById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09b24561-2edb-49cc-b150-2ca9d909e5e3",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8829bd2e-2ea6-4e1c-a522-bc43f92f20c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetBuyerOrderTrackingData\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetBuyerOrderTrackingDataById>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n      </ccl:GetBuyerOrderTrackingDataById>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetExcludedSuppliersForCustomer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cc17daf-6a45-4327-b92c-da8a03d1ac5e",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierId = body.GetExcludedSuppliersForCustomerResponse.GetExcludedSuppliersForCustomerResult.ExcludedSupplier.SupplierId;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierId is 29648\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"29648\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "879b7547-817a-42a4-9b3a-53d7b23a8f8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetExcludedSuppliersForCustomer\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetExcludedSuppliersForCustomer>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n      </ccl:GetExcludedSuppliersForCustomer>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetOrderIdsWithinThreshold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d0a78b7-53da-4d67-9843-273010f55c46",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    \r",
									"pm.test(\"Order Ids successfully returned?\", function() {\r",
									"var jsonData = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"pm.expect(jsonData.GetOrderIdsWithinThresholdResponse.GetOrderIdsWithinThresholdResult.OrderIds).not.eq(undefined);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4c1edbc7-f753-4bfb-95b1-12c8f69f596b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetOrderIdsWithinThreshold\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetOrderIdsWithinThreshold>\r\n         <!--Optional:-->\r\n         <ccl:carrierInternalCode>ups</ccl:carrierInternalCode>\r\n         <ccl:thresholdDays>1</ccl:thresholdDays>\r\n      </ccl:GetOrderIdsWithinThreshold>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetSupplierReasonForExportCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f937c8a-22c6-4c8c-8fb7-f3ef9af398b2",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierReasonForExportCode = body.GetSupplierReasonForExportCodeResponse.GetSupplierReasonForExportCodeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierReasonForExportCode is 01\", function () {\r",
									"        pm.expect(supplierReasonForExportCode).to.eql(\"01\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69b9d4e1-fdf3-4bca-a2ce-3da9275fb94e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetSupplierReasonForExportCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetSupplierReasonForExportCode>\r\n         <ccl:supplierId>933</ccl:supplierId>\r\n         <!--Optional:-->\r\n         <ccl:genericCode>sale</ccl:genericCode>\r\n      </ccl:GetSupplierReasonForExportCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetSupplierReasonsForExport",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f937c8a-22c6-4c8c-8fb7-f3ef9af398b2",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierReasonForExportCodeId = body.GetSupplierReasonsForExportResponse.GetSupplierReasonsForExportResult.CommercialInvoiceSupplierReasonForExport[0].Id;\r",
									"var supplierReasonForExportCodeSupplierId = body.GetSupplierReasonsForExportResponse.GetSupplierReasonsForExportResult.CommercialInvoiceSupplierReasonForExport[0].SupplierId;\r",
									"var supplierReasonForExportCodeReasonId = body.GetSupplierReasonsForExportResponse.GetSupplierReasonsForExportResult.CommercialInvoiceSupplierReasonForExport[0].ReasonId;\r",
									"var supplierReasonForExportCodeSale = body.GetSupplierReasonsForExportResponse.GetSupplierReasonsForExportResult.CommercialInvoiceSupplierReasonForExport[0].Code;\r",
									"var supplierReasonForExportCodeEnvironment = body.GetSupplierReasonsForExportResponse.GetSupplierReasonsForExportResult.CommercialInvoiceSupplierReasonForExport[0].Environment;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierReasonForExportCodeId is 75\", function () {\r",
									"        pm.expect(supplierReasonForExportCodeId).to.eql(\"75\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SupplierId is 21748\", function () {\r",
									"        pm.expect(supplierReasonForExportCodeSupplierId).to.eql(\"21748\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ReasonId is 1\", function () {\r",
									"        pm.expect(supplierReasonForExportCodeReasonId).to.eql(\"1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierReasonForExportCodeSale is Sale\", function () {\r",
									"        pm.expect(supplierReasonForExportCodeSale).to.eql(\"Sale\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierReasonForExportCodeEnvironment is PCL\", function () {\r",
									"        pm.expect(supplierReasonForExportCodeEnvironment).to.eql(\"PCL\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bfa9aaa0-b801-438a-bf7d-dc80fbf6c38f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetSupplierReasonsForExport\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetSupplierReasonsForExport>\r\n         <ccl:supplierId>21748</ccl:supplierId>\r\n      </ccl:GetSupplierReasonsForExport>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetSupplierServiceLocationExclusions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f42beb3-b456-4968-9113-c89984de36c2",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierCode = body.GetSupplierServiceLocationExclusionsResponse.GetSupplierServiceLocationExclusionsResult.SupplierServiceLocationExclusion[0].SupplierCode;\r",
									"var collectionCountry = body.GetSupplierServiceLocationExclusionsResponse.GetSupplierServiceLocationExclusionsResult.SupplierServiceLocationExclusion[0].CollectionCountry;\r",
									"var deliveryCountry = body.GetSupplierServiceLocationExclusionsResponse.GetSupplierServiceLocationExclusionsResult.SupplierServiceLocationExclusion[0].DeliveryCountry;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"supplierCode is xdp\", function () {\r",
									"        pm.expect(supplierCode).to.eql(\"xdp\");\r",
									"    });\r",
									"\r",
									"pm.test(\"collectionCountry is GB\", function () {\r",
									"        pm.expect(collectionCountry).to.eql(\"GB\");\r",
									"    });\r",
									"\r",
									"pm.test(\"deliveryCountry is IE\", function () {\r",
									"        pm.expect(deliveryCountry).to.eql(\"IE\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2961ac28-09cf-45c3-9de8-6e80dd22e8bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetSupplierServiceLocationExclusions\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetSupplierServiceLocationExclusions>\r\n         <!--Optional:-->\r\n         <ccl:collectionDate>2022-01-01</ccl:collectionDate>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n      </ccl:GetSupplierServiceLocationExclusions>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetTrackingNumbersDueForDeliveryWithinThresholdByAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40225cd7-a7a6-42f0-a162-fd4475571d85",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var key = body.GetTrackingNumbersDueForDeliveryWithinThresholdByAccountResponse.GetTrackingNumbersDueForDeliveryWithinThresholdByAccountResult.TrackingNumbersBySupplierAndAccount.TrackingAccountsBySupplier.Key;\r",
									"\r",
									"var trackingNumbersByAccountKey = body.GetTrackingNumbersDueForDeliveryWithinThresholdByAccountResponse.GetTrackingNumbersDueForDeliveryWithinThresholdByAccountResult.TrackingNumbersBySupplierAndAccount.TrackingAccountsBySupplier.Values.TrackingNumbersByAccount.Key;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Tracking numbers successfully returned?\", function() {\r",
									"var jsonData = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									" pm.expect(jsonData.GetTrackingNumbersDueForDeliveryWithinThresholdByAccountResponse.GetTrackingNumbersDueForDeliveryWithinThresholdByAccountResult.TrackingNumbersBySupplierAndAccount.TrackingAccountsBySupplier).not.eq(undefined);\r",
									" });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c0cdf2e-ee71-4b6d-aa41-9caa6b3a63cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetTrackingNumbersDueForDeliveryWithinThresholdByAccount\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetTrackingNumbersDueForDeliveryWithinThresholdByAccount>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:thresholdDays>70</ccl:thresholdDays>\r\n         <ccl:maxOrdersToReturn>10</ccl:maxOrdersToReturn>\r\n      </ccl:GetTrackingNumbersDueForDeliveryWithinThresholdByAccount>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetTrackingNumbersWithinThreshold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d0a78b7-53da-4d67-9843-273010f55c46",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierId = body.GetTrackingNumbersWithinThresholdResponse.GetTrackingNumbersWithinThresholdResult.SupplierId;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    \r",
									"pm.test(\"Tracking Numbers successfully returned?\", function() {\r",
									"var jsonData = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"pm.expect(jsonData.GetTrackingNumbersWithinThresholdResponse.GetTrackingNumbersWithinThresholdResult.TrackingNumbers).not.eq(undefined);\r",
									"});\r",
									"\r",
									"pm.test(\"supplierId is 33\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"33\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cbd68c26-b765-44de-aa4e-6e88d189d175",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetTrackingNumbersWithinThreshold\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetTrackingNumbersWithinThreshold>\r\n         <!--Optional:-->\r\n         <ccl:carrierInternalCode>ups</ccl:carrierInternalCode>\r\n         <ccl:thresholdDays>1</ccl:thresholdDays>\r\n      </ccl:GetTrackingNumbersWithinThreshold>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetTrackingNumbersWithinThresholdByAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cfda40a-1c5a-4e7a-aec6-5783569fc289",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var key = body.GetTrackingNumbersWithinThresholdByAccountResponse.GetTrackingNumbersWithinThresholdByAccountResult.TrackingNumbersBySupplierAndAccount.TrackingAccountsBySupplier.Key;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"key is 33\", function () {\r",
									"        pm.expect(key).to.eql(\"33\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "01d5031d-9daf-4374-8759-6c73bc773a3e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetTrackingNumbersWithinThresholdByAccount\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetTrackingNumbersWithinThresholdByAccount>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:thresholdDays>30</ccl:thresholdDays>\r\n         <ccl:maxOrdersToReturn>10</ccl:maxOrdersToReturn>\r\n      </ccl:GetTrackingNumbersWithinThresholdByAccount>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetUnPodedJobsToTrack",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00c49a96-b0e2-4a2e-843f-fcdad748e048",
								"exec": [
									"pm.variables.set('trackingReference', _.random (10000000, 99999999));\r",
									"\r",
									"\r",
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a20b2215-9bc1-4306-b261-8eb7a9921dfa",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetUnPodedJobsToTrackResponse.GetUnPodedJobsToTrackResult.OrderToTrack[0].OrderId;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order Id is successfully returned?\", function() {\r",
									"pm.expect(orderId).not.eq(undefined);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8de9f25-13a4-4323-bb85-1c104eeba466",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetUnPodedJobsToTrack\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetUnPodedJobsToTrack>\r\n         <ccl:supplierId>21748</ccl:supplierId>\r\n      </ccl:GetUnPodedJobsToTrack>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetUnPodedJobsWithPiecesToTrack",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00c49a96-b0e2-4a2e-843f-fcdad748e048",
								"exec": [
									"pm.variables.set('trackingReference', _.random (10000000, 99999999));\r",
									"\r",
									"\r",
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a20b2215-9bc1-4306-b261-8eb7a9921dfa",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetUnPodedJobsWithPiecesToTrackResponse.GetUnPodedJobsWithPiecesToTrackResult.OrderToTrack[0].OrderId;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order Id is successfully returned?\", function() {\r",
									"pm.expect(orderId).not.eq(undefined);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b75f6184-7607-4c21-a272-67041c395112",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetUnPodedJobsWithPiecesToTrack\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetUnPodedJobsWithPiecesToTrack>\r\n         <ccl:supplierId>21748</ccl:supplierId>\r\n      </ccl:GetUnPodedJobsWithPiecesToTrack>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetTrackingUrlOrNull",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00c49a96-b0e2-4a2e-843f-fcdad748e048",
								"exec": [
									"pm.variables.set('trackingReference', _.random (10000000, 99999999));\r",
									"\r",
									"\r",
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a20b2215-9bc1-4306-b261-8eb7a9921dfa",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var trackingUrl = body.GetTrackingUrlOrNullResponse.GetTrackingUrlOrNullResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"TrackingURL contains UPS?\", function() {\r",
									"        pm.expect(trackingUrl).to.include(\"ups\");\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "04c2a00c-e085-4d4d-b2b2-821b719c318e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetTrackingUrlOrNull\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetTrackingUrlOrNull>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <!--Optional:-->\r\n         <ccl:trackingReference></ccl:trackingReference>\r\n         <!--Optional:-->\r\n         <ccl:supplierAccountNumber></ccl:supplierAccountNumber>\r\n         <!--Optional:-->\r\n         <ccl:deliverPostcode></ccl:deliverPostcode>\r\n      </ccl:GetTrackingUrlOrNull>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "IsExistingOrderPaperless",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1e96195-a5f3-47af-b2e7-f3079dfabdb3",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var isExistingOrderPaperless = body.IsExistingOrderPaperlessResponse.IsExistingOrderPaperlessResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsExistingOrderPaperless is false?\", function () {\r",
									"        pm.expect(isExistingOrderPaperless).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "90e19437-a638-4bc2-9b03-aacf805d6d80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/IsExistingOrderPaperless\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsExistingOrderPaperless>\r\n         <ccl:orderID>7478482</ccl:orderID>\r\n      </ccl:IsExistingOrderPaperless>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "MarkOrderAsCancelled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc776f6-bcb6-4ee3-9251-ce1cae39e493",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerName = body.MarkOrderAsCancelledResponse;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07f0a27b-8890-4a59-8f1f-89593209b9ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/MarkOrderAsCancelled\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:MarkOrderAsCancelled>\r\n         <ccl:orderId>9613868</ccl:orderId>\r\n      </ccl:MarkOrderAsCancelled>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "MarkOrderAsCancelledNegative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc776f6-bcb6-4ee3-9251-ce1cae39e493",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerName = body.MarkOrderAsCancelledResponse;\r",
									"\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Internal Server Error\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "430ff679-b966-4478-b9c2-780fdb516f01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/MarkOrderAsCancelled\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:MarkOrderAsCancelled>\r\n         <ccl:orderId>-100</ccl:orderId>\r\n      </ccl:MarkOrderAsCancelled>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetTrackingNumbersWithinPodThresholdByAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cfda40a-1c5a-4e7a-aec6-5783569fc289",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var key = body.GetTrackingNumbersWithinPodThresholdByAccountResponse.GetTrackingNumbersWithinPodThresholdByAccountResult.TrackingNumbersBySupplierAndAccount;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a8d58ce4-412a-4014-b30c-a6c97c17a1a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetTrackingNumbersWithinPodThresholdByAccount\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetTrackingNumbersWithinPodThresholdByAccount>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:podThreshold>30</ccl:podThreshold>\r\n         <ccl:maxOrdersToReturn>10</ccl:maxOrdersToReturn>\r\n      </ccl:GetTrackingNumbersWithinPodThresholdByAccount>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetTrackingDueForDeliveryWithinThresholdByAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40225cd7-a7a6-42f0-a162-fd4475571d85",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierId = body.GetTrackingDueForDeliveryWithinThresholdByAccountResponse.GetTrackingDueForDeliveryWithinThresholdByAccountResult.SupplierId\r",
									"\r",
									"var supplierAccNo = body.GetTrackingDueForDeliveryWithinThresholdByAccountResponse.GetTrackingDueForDeliveryWithinThresholdByAccountResult.TrackingAccounts.TrackingHistoryAccountsBySupplier.SupplierAccountNumber;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"// pm.test(\"Tracking numbers successfully returned?\", function() {\r",
									"// pm.expect(body.GetTrackingDueForDeliveryWithinThresholdByAccountResponse.GetTrackingDueForDeliveryWithinThresholdByAccountResult.TrackingHistoryAccountsBySupplier.Tracking[0].Tracking[1].TrackingNumber).not.eq(undefined);\r",
									"// });\r",
									"\r",
									"pm.test(\"supplierId is 33\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"33\");\r",
									"});\r",
									"\r",
									"pm.test(\"supplierAccNo is present?\", function () {\r",
									"        pm.expect(supplierAccNo).to.not.eql(undefined);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82fd3ada-2b31-427c-9f8c-bbe658329254",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetTrackingDueForDeliveryWithinThresholdByAccount\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetTrackingDueForDeliveryWithinThresholdByAccount>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:thresholdDays>30</ccl:thresholdDays>\r\n         <ccl:maxOrdersToReturn>10</ccl:maxOrdersToReturn>\r\n      </ccl:GetTrackingDueForDeliveryWithinThresholdByAccount>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetOrdersForBulkVoiding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6722a088-ac9b-497a-8023-cd305f509422",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerName = body.GetOrdersForBulkVoidingResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d692f1b5-a73e-4616-9092-bbdc5c2643bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetOrdersForBulkVoiding\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetOrdersForBulkVoiding>\r\n         <ccl:customerId>81314</ccl:customerId>\r\n      </ccl:GetOrdersForBulkVoiding>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetChildOrdersForManifesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00c49a96-b0e2-4a2e-843f-fcdad748e048",
								"exec": [
									"pm.variables.set('trackingReference', _.random (10000000, 99999999));\r",
									"\r",
									"\r",
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a20b2215-9bc1-4306-b261-8eb7a9921dfa",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"// var customerName = body.GetCustomerNameResponse.GetCustomerNameResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"// pm.test(\"Customer Name is Test Customer: Webservices Test Customer\", function () {\r",
									"//      pm.expect(customerName).to.eql(\"Test Customer: Webservices Test Customer\");\r",
									"//   });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6bc5f47c-ee15-4ad5-8e96-a209e7d7c31d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetChildOrdersForManifesting\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetChildOrdersForManifesting>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:customerId>80971</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:customerSupplierAccount></ccl:customerSupplierAccount>\r\n         <ccl:collectionDate>{{collectionDate}}</ccl:collectionDate>\r\n         <ccl:getChildJobs>true</ccl:getChildJobs>\r\n      </ccl:GetChildOrdersForManifesting>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetOrdersForManifesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00c49a96-b0e2-4a2e-843f-fcdad748e048",
								"exec": [
									"pm.variables.set('trackingReference', _.random (10000000, 99999999));\r",
									"\r",
									"\r",
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a20b2215-9bc1-4306-b261-8eb7a9921dfa",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"// var customerName = body.GetCustomerNameResponse.GetCustomerNameResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"// pm.test(\"Customer Name is Test Customer: Webservices Test Customer\", function () {\r",
									"//      pm.expect(customerName).to.eql(\"Test Customer: Webservices Test Customer\");\r",
									"//   });"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "672c7160-ebd2-4d8f-84e6-77bb37e3dfe8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetOrdersForManifesting\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetOrdersForManifesting>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n         <!--Optional:-->\r\n         <ccl:customerSupplierAccount></ccl:customerSupplierAccount>\r\n         <ccl:collectionDate>{{collectionDate}}</ccl:collectionDate>\r\n      </ccl:GetOrdersForManifesting>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetBuyerOrderTrackingDataPalletways",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09b24561-2edb-49cc-b150-2ca9d909e5e3",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.OrderID;\r",
									"var customerId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.CustomerID;\r",
									"var completed = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Completed;\r",
									"var supplierId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.ID;\r",
									"var supplierName = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.Name;\r",
									"var supplierFriendlyName = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.FriendlyName;\r",
									"var shippingRefOne = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.ShippingReference1;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order ID is 3402347\", function () {\r",
									"        pm.expect(orderId).to.eql(\"3402347\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 54933\", function () {\r",
									"        pm.expect(customerId).to.eql(\"54933\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Completed is true?\", function () {\r",
									"        pm.expect(completed).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 2286?\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"2286\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier Name is Salvatori Network?\", function () {\r",
									"        pm.expect(supplierName).to.eql(\"Salvatori Network\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier Friendly Name is PALLET NETWORK?\", function () {\r",
									"        pm.expect(supplierFriendlyName).to.eql(\"PALLET NETWORK\");\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"ShippingReference1 is TYLER 24-05?\", function () {\r",
									"        pm.expect(shippingRefOne).to.eql(\"TYLER 24-05\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e16c5997-3289-417b-8531-8ccaca3ee806",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetBuyerOrderTrackingData\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetBuyerOrderTrackingData>\r\n         <ccl:orderGuid>46827B6C-E50C-45B9-B2E3-C557CB6776D8</ccl:orderGuid>\r\n      </ccl:GetBuyerOrderTrackingData>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "GetBuyerOrderTrackingDataPodfather",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09b24561-2edb-49cc-b150-2ca9d909e5e3",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.OrderID;\r",
									"var customerId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.CustomerID;\r",
									"var completed = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Completed;\r",
									"var supplierId = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.ID;\r",
									"var supplierName = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.Name;\r",
									"var supplierFriendlyName = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.FriendlyName;\r",
									"var shippingRefOne = body.GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.ShippingReference1;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order ID is 5684990\", function () {\r",
									"        pm.expect(orderId).to.eql(\"5684990\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Customer ID is 50544\", function () {\r",
									"        pm.expect(customerId).to.eql(\"50544\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Completed is false?\", function () {\r",
									"        pm.expect(completed).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 10045?\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"10045\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier Name is DB Freelance?\", function () {\r",
									"        pm.expect(supplierName).to.eql(\"DB Freelance\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier Friendly Name is DB Freelance Ltd?\", function () {\r",
									"        pm.expect(supplierFriendlyName).to.eql(\"DB Freelance Ltd\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShippingReference1 is 177626?\", function () {\r",
									"        pm.expect(shippingRefOne).to.eql(\"177626\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order to not have Network\", function () {\r",
									"        pm.expect(body).to.not.have.property(\"GetBuyerOrderTrackingDataResponse.GetBuyerOrderTrackingDataResult.Supplier.Network\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9e46756-cba2-4ec6-bae4-f86fb2a39b1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/GetBuyerOrderTrackingData\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetBuyerOrderTrackingData>\r\n         <ccl:orderGuid>5A0A68AF-D67A-44A2-A9C9-CDBA78D682B0</ccl:orderGuid>\r\n      </ccl:GetBuyerOrderTrackingData>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				}
			],
			"id": "a368899e-d965-4635-a4e1-53f11517562f"
		},
		{
			"name": "LineItem",
			"item": [
				{
					"name": "CreateOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderResult = body.CreateOrderResponse.CreateOrderResult;\r",
									"\r",
									"pm.variables.set(\"orderId\", orderResult);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order Id is successfully returned?\", function() {\r",
									"var jsonData = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"pm.expect(jsonData.CreateOrderResponse.CreateOrderResult).not.eq(undefined);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"pm.variables.set('trackingReference', _.random (10000000, 99999999));\r",
									"\r",
									"\r",
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "986a0a90-015f-4f5a-937e-eeef1a217843",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"eBos_Import_WebService/CreateOrder\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ebos=\"eBos_Import_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ebos:CreateOrder>\r\n         <!--Optional:-->\r\n         <ebos:orderDetails>\r\n            <ebos:OrderSourceTypes>Unknown</ebos:OrderSourceTypes>\r\n            <ebos:BookingMethodTypes>Unknown</ebos:BookingMethodTypes>\r\n            <!--Optional:-->\r\n            <ebos:TrackingReference>{{trackingReference}}</ebos:TrackingReference>\r\n            <!--Optional:-->\r\n            <ebos:AccountID>33722E</ebos:AccountID>\r\n            <!--Optional:-->\r\n            <ebos:AccountName></ebos:AccountName>\r\n            <!--Optional:-->\r\n            <ebos:CCLCustomerNo>81353</ebos:CCLCustomerNo>\r\n            <!--Optional:-->\r\n            <ebos:CCLCustomerName></ebos:CCLCustomerName>\r\n            <!--Optional:-->\r\n            <ebos:CCLCustomerSubCustomerRef></ebos:CCLCustomerSubCustomerRef>\r\n            <!--Optional:-->\r\n            <ebos:ShippingStatus></ebos:ShippingStatus>\r\n            <!--Optional:-->\r\n            <ebos:SupplierName>ups</ebos:SupplierName>\r\n            <!--Optional:-->\r\n            <ebos:ServiceName>65</ebos:ServiceName>\r\n            <ebos:ServiceCode>65</ebos:ServiceCode>\r\n            <ebos:Remarks></ebos:Remarks>\r\n            <!--Optional:-->\r\n            <ebos:ShipperAccountNumber>33722E</ebos:ShipperAccountNumber>\r\n            <ebos:LastScanDate></ebos:LastScanDate>\r\n            <!--Optional:-->\r\n            <ebos:LastScanTime></ebos:LastScanTime>\r\n            <!--Optional:-->\r\n            <ebos:AdditionalHistoryInfo></ebos:AdditionalHistoryInfo>\r\n            <!--Optional:-->\r\n            <ebos:SystemID></ebos:SystemID>\r\n            <!--Optional:-->\r\n            <ebos:DeliveryOption></ebos:DeliveryOption>\r\n            <!--Optional:-->\r\n            <ebos:OverseasVatNumber></ebos:OverseasVatNumber>\r\n            <!--Optional:-->\r\n            <ebos:SupplierNote></ebos:SupplierNote>\r\n            <!--Optional:-->\r\n            <ebos:CollectionTailLift></ebos:CollectionTailLift>\r\n            <!--Optional:-->\r\n            <ebos:DeliveryTailLift></ebos:DeliveryTailLift>\r\n            <!--Optional:-->\r\n            <ebos:CollectionLimitedAccess></ebos:CollectionLimitedAccess>\r\n            <!--Optional:-->\r\n            <ebos:DeliveryLimitedAccess></ebos:DeliveryLimitedAccess>\r\n            <!--Optional:-->\r\n            <ebos:CCLTrackingNumber></ebos:CCLTrackingNumber>\r\n            <ebos:LastScanLocation></ebos:LastScanLocation>\r\n            <ebos:SupplierId>33</ebos:SupplierId>\r\n            <!--Optional:-->\r\n            <ebos:OnBehalfOfCustomer></ebos:OnBehalfOfCustomer>\r\n            <!--Optional:-->\r\n            <ebos:Freedom></ebos:Freedom>\r\n            <!--Optional:-->\r\n            <ebos:ShippingRequirements>\r\n               <!--Optional:-->\r\n               <ebos:CollectionAddress>\r\n                  <ebos:Id>81353</ebos:Id>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressId></ebos:AddressId>\r\n                  <!--Optional:-->\r\n                  <ebos:CompanyName>Test Customer: IWS Test Customer</ebos:CompanyName>\r\n                  <!--Optional:-->\r\n                  <ebos:ContactName>Test Customer: IWS Test Customer</ebos:ContactName>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine1>Test Line1</ebos:AddressLine1>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine2>Test Line2</ebos:AddressLine2>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine3>Test Line3</ebos:AddressLine3>\r\n                  <!--Optional:-->\r\n                  <ebos:Town>Kilmarnock</ebos:Town>\r\n                  <!--Optional:-->\r\n                  <ebos:Postcode>KA2 0BA</ebos:Postcode>\r\n                  <!--Optional:-->\r\n                  <ebos:County>\r\n                     <!--Optional:-->\r\n                     <ebos:Code></ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name></ebos:Name>\r\n                  </ebos:County>\r\n                  <!--Optional:-->\r\n                  <ebos:Country>\r\n                     <!--Optional:-->\r\n                     <ebos:Code>GB</ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name>United Kingdom</ebos:Name>\r\n                  </ebos:Country>\r\n                  <!--Optional:-->\r\n                  <ebos:Telephone></ebos:Telephone>\r\n                  <!--Optional:-->\r\n                  <ebos:Email></ebos:Email>\r\n                  <!--Optional:-->\r\n               </ebos:CollectionAddress>\r\n               <!--Optional:-->\r\n               <ebos:DeliveryAddress>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressId></ebos:AddressId>\r\n                  <!--Optional:-->\r\n                  <ebos:CompanyName>CompanyName</ebos:CompanyName>\r\n                  <!--Optional:-->\r\n                  <ebos:ContactName>ContactName</ebos:ContactName>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine1>Test AddressLine1</ebos:AddressLine1>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine2>Test AddressLine2</ebos:AddressLine2>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine3>Test AddressLine3</ebos:AddressLine3>\r\n                  <!--Optional:-->\r\n                  <ebos:Town>TownCity</ebos:Town>\r\n                  <!--Optional:-->\r\n                  <ebos:Postcode>ML1 4FN</ebos:Postcode>\r\n                  <!--Optional:-->\r\n                  <ebos:County>\r\n                     <!--Optional:-->\r\n                     <ebos:Code></ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name></ebos:Name>\r\n                  </ebos:County>\r\n                  <!--Optional:-->\r\n                  <ebos:Country>\r\n                     <!--Optional:-->\r\n                     <ebos:Code>GB</ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name>United Kingdom</ebos:Name>\r\n                  </ebos:Country>\r\n                  <!--Optional:-->\r\n                  <ebos:Telephone></ebos:Telephone>\r\n                  <!--Optional:-->\r\n                  <ebos:Email></ebos:Email>\r\n                  <!--Optional:-->\r\n               </ebos:DeliveryAddress>\r\n               <!--Optional:-->\r\n               <ebos:FullPieceDetails>\r\n                  <!--Optional:-->\r\n                  <ebos:Pieces>\r\n                     <!--Zero or more repetitions:-->\r\n                     <ebos:PieceDetailSOAP>\r\n                        <ebos:Length>23</ebos:Length>\r\n                        <ebos:Width>14.5</ebos:Width>\r\n                        <ebos:Height>12</ebos:Height>\r\n                        <ebos:Weight>5.5</ebos:Weight>\r\n                        <!--Optional:-->\r\n                        <ebos:TrackingReference>{{trackingReference}}</ebos:TrackingReference>\r\n                        <!--Optional:-->\r\n                        <ebos:ShippingReferences>\r\n                        <!--Zero or more repetitions:-->\r\n                           <ebos:string></ebos:string>\r\n                        </ebos:ShippingReferences>\r\n                        <!--Optional:-->\r\n                        <ebos:ShipmentTypeCode></ebos:ShipmentTypeCode>\r\n                        <ebos:LineItems>\r\n                            <ebos:LineItem>\r\n                                <!--Optional:-->\r\n                                <ebos:DescriptionOfGoods>TestingDescription</ebos:DescriptionOfGoods>\r\n                                <!--Optional:-->\r\n                                <ebos:Sku>SKU1</ebos:Sku>\r\n                                <ebos:Quantity>1</ebos:Quantity>\r\n                                <ebos:Weight>10</ebos:Weight>\r\n                                <!--Optional:-->\r\n                                <ebos:ProductName>RobbieTestProduct</ebos:ProductName>\r\n                                <ebos:UnitPrice>10</ebos:UnitPrice>\r\n                                <!--Optional:-->\r\n                                <ebos:CountryOfOriginIso2Code>GB</ebos:CountryOfOriginIso2Code>\r\n                                <!--Optional:-->\r\n                                <ebos:CountryOfManufactureIso2Code>GB</ebos:CountryOfManufactureIso2Code>\r\n                                <!--Optional:-->\r\n                                <ebos:CommodityCode>12345678</ebos:CommodityCode>\r\n                            </ebos:LineItem>\r\n                        </ebos:LineItems>\r\n                     </ebos:PieceDetailSOAP>\r\n                  </ebos:Pieces>\r\n                  <!--Optional:-->\r\n                  <ebos:DescriptionOfGoods>Some interesting goods for testing</ebos:DescriptionOfGoods>\r\n                  <ebos:ValueOfGoods>25.75</ebos:ValueOfGoods>\r\n                  <!--Optional:-->\r\n                  <ebos:ValueOfGoodsCurrency></ebos:ValueOfGoodsCurrency>\r\n               </ebos:FullPieceDetails>\r\n               <!--Optional:-->\r\n               <ebos:ShippingReference>ShipRef1</ebos:ShippingReference>\r\n               <!--Optional:-->\r\n               <ebos:ShippingReference2>ShipRef2</ebos:ShippingReference2>\r\n               <!--Optional:-->\r\n               <ebos:ShippingReference3>ShipRef3</ebos:ShippingReference3>\r\n               <!--Optional:-->\r\n               <ebos:CollectionDate>{{collectionDate}}</ebos:CollectionDate>\r\n               <ebos:DeliveryInstructions></ebos:DeliveryInstructions>\r\n               <!--Optional:-->\r\n               <ebos:CarrierMovementId></ebos:CarrierMovementId>\r\n               <!--Optional:-->\r\n               <ebos:ShippingOptionsDetails>\r\n                  <!--Optional:-->\r\n                  <ebos:NotificationMobileNumber></ebos:NotificationMobileNumber>\r\n                  <!--Optional:-->\r\n                  <ebos:NotificationEmailAddress></ebos:NotificationEmailAddress>\r\n               </ebos:ShippingOptionsDetails>\r\n               <!--Optional:-->\r\n               <ebos:CollectionOptions>\r\n               </ebos:CollectionOptions>\r\n               <!--Optional:-->\r\n               <ebos:BillingOptions>\r\n                  <!--Optional:-->\r\n                  <ebos:DutiesAndTaxes>\r\n                     <!--Optional:-->\r\n                     <ebos:Nickname></ebos:Nickname>\r\n                     <!--Optional:-->\r\n                     <ebos:Postcode></ebos:Postcode>\r\n                     <!--Optional:-->\r\n                     <ebos:AccountNumber></ebos:AccountNumber>\r\n                  </ebos:DutiesAndTaxes>\r\n               </ebos:BillingOptions>\r\n            </ebos:ShippingRequirements>\r\n            <!--Optional:-->\r\n            <ebos:UniqueReference></ebos:UniqueReference>\r\n            <!--Optional:-->\r\n            <ebos:ContractNumber></ebos:ContractNumber>\r\n            <ebos:DataExpiryDate>{{collectionDate}}</ebos:DataExpiryDate>\r\n            <!--Optional:-->\r\n            <ebos:CustomerPrimaryReference>TestCustomerPrimaryReferenceOne</ebos:CustomerPrimaryReference>\r\n         </ebos:orderDetails>\r\n      </ebos:CreateOrder>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{importWsUrl}}/orderimport.asmx"
					},
					"response": []
				},
				{
					"name": "GetPieceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var pieceId = body.GetLineItemsByTrackingReferenceResponse.GetLineItemsByTrackingReferenceResult.Items.WebServiceLineItem.PieceId;\r",
									"var count = body.GetLineItemsByTrackingReferenceResponse.GetLineItemsByTrackingReferenceResult.Count;\r",
									"\r",
									"pm.variables.set(\"pieceId\", pieceId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Piece has 1 line item\", function () {\r",
									"        pm.expect(count).to.eql(\"1\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "38d0377c-aa3a-4ba5-b639-9fdb5631475f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetLineItemsByTrackingReference\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetLineItemsByTrackingReference>\r\n         <!--Optional:-->\r\n         <ccl:request>\r\n            <ccl:OrderId>{{orderId}}</ccl:OrderId>\r\n            <!--Optional:-->\r\n            <ccl:TrackingReference>{{trackingReference}}</ccl:TrackingReference>\r\n         </ccl:request>\r\n      </ccl:GetLineItemsByTrackingReference>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CreateLineItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3a8cadde-ab5a-43e3-a4d3-79018592c845",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CreateLineItem\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CreateLineItem>\r\n         <!--Optional:-->\r\n         <ccl:lineItem>\r\n            <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n            <!--Optional:-->\r\n            <ccl:DescriptionOfGoods>TestingDescription</ccl:DescriptionOfGoods>\r\n            <!--Optional:-->\r\n            <ccl:Sku>SKU1</ccl:Sku>\r\n            <ccl:Quantity>1</ccl:Quantity>\r\n            <ccl:Weight>10</ccl:Weight>\r\n            <!--Optional:-->\r\n            <ccl:ProductName>RobbieTestProduct</ccl:ProductName>\r\n            <ccl:Price>10</ccl:Price>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n            <!--Optional:-->\r\n            <ccl:LineItemNumber>1</ccl:LineItemNumber>\r\n         </ccl:lineItem>\r\n      </ccl:CreateLineItem>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "GetAllLineItems-CheckCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var lineItemResult = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Id;\r",
									"var skuOne = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Sku;\r",
									"var weight = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Weight;\r",
									"var price = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Price;\r",
									"\r",
									"pm.variables.set(\"lineItemId\", lineItemResult);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKU1 is present\", function () {\r",
									"        pm.expect(skuOne).to.eql(\"SKU1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Weight is 10\", function () {\r",
									"        pm.expect(weight).to.eql(\"10.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Price is 10\", function () {\r",
									"        pm.expect(price).to.eql(\"10.000\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cfa3a9e9-676f-42e8-9b15-3c8a4774b81c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllLineItems>\r\n         <ccl:pieceId>{{pieceId}}</ccl:pieceId>\r\n      </ccl:GetAllLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "UpdateLineItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e70d009b-7434-4078-a657-8bafa2a7c8cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/UpdateLineItem\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:UpdateLineItem>\r\n         <!--Optional:-->\r\n         <ccl:lineItem>\r\n            <ccl:Id>{{lineItemId}}</ccl:Id>\r\n            <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n            <!--Optional:-->\r\n            <ccl:DescriptionOfGoods>UpdateDescOfGoods</ccl:DescriptionOfGoods>\r\n            <!--Optional:-->\r\n            <ccl:Sku>1</ccl:Sku>\r\n            <ccl:Quantity>1</ccl:Quantity>\r\n            <ccl:Weight>11</ccl:Weight>\r\n            <!--Optional:-->\r\n            <ccl:ProductName>TestProdName</ccl:ProductName>\r\n            <ccl:Price>15.99</ccl:Price>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CommodityCode>123456789</ccl:CommodityCode>\r\n            <!--Optional:-->\r\n            <ccl:LineItemNumber>1</ccl:LineItemNumber>\r\n         </ccl:lineItem>\r\n      </ccl:UpdateLineItem>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CheckUpdated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var pieceId = body.GetLineItemsByTrackingReferenceResponse.GetLineItemsByTrackingReferenceResult.Items.WebServiceLineItem[1].PieceId;\r",
									"var weight = body.GetLineItemsByTrackingReferenceResponse.GetLineItemsByTrackingReferenceResult.Items.WebServiceLineItem[1].Weight;\r",
									"var price = body.GetLineItemsByTrackingReferenceResponse.GetLineItemsByTrackingReferenceResult.Items.WebServiceLineItem[1].Price;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"pieceId is correct\", function () {\r",
									"        pm.expect(pieceId).to.eql(pm.variables.get(\"pieceId\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"Weight is now 11\", function () {\r",
									"        pm.expect(weight).to.eql(\"11.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Price is now 15.99\", function () {\r",
									"        pm.expect(price).to.eql(\"15.990\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6502748b-f07a-4627-bf2b-c0a06dfe87e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetLineItemsByTrackingReference\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetLineItemsByTrackingReference>\r\n         <!--Optional:-->\r\n         <ccl:request>\r\n            <ccl:OrderId>{{orderId}}</ccl:OrderId>\r\n            <!--Optional:-->\r\n            <ccl:TrackingReference>{{trackingReference}}</ccl:TrackingReference>\r\n         </ccl:request>\r\n      </ccl:GetLineItemsByTrackingReference>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "DeleteLineItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dec9f028-69f3-405a-9b97-f801ce2dff4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/DeleteLineItem\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:DeleteLineItem>\r\n         <ccl:id>{{lineItemId}}</ccl:id>\r\n      </ccl:DeleteLineItem>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CheckDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var lineItems = body[\"GetAllLineItemsResponse\"][\"GetAllLineItemsResult\"][\"WebServiceLineItem\"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Line item has been deleted\", function(){\r",
									"        _.each(lineItems, (lineItem) => {\r",
									"            pm.expect(lineItem.Id).to.not.equal(pm.variables.get(\"lineItemId\"));\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e2a89ab7-e648-4a9a-8824-b7400140c7a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllLineItems>\r\n         <ccl:pieceId>{{pieceId}}</ccl:pieceId>\r\n      </ccl:GetAllLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CreatePieceLineItemByTrackingReference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b3bc7049-462d-4be5-996d-1b23d17cfc6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CreatePieceLineItemByTrackingReference\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CreatePieceLineItemByTrackingReference>\r\n         <!--Optional:-->\r\n         <ccl:trackingReference>{{trackingReference}}</ccl:trackingReference>\r\n         <!--Optional:-->\r\n         <ccl:lineItem>\r\n           <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n            <!--Optional:-->\r\n            <ccl:DescriptionOfGoods>TestingDescription</ccl:DescriptionOfGoods>\r\n            <!--Optional:-->\r\n            <ccl:Sku>SKU1</ccl:Sku>\r\n            <ccl:Quantity>1</ccl:Quantity>\r\n            <ccl:Weight>10</ccl:Weight>\r\n            <!--Optional:-->\r\n            <ccl:ProductName>RobbieTestProduct</ccl:ProductName>\r\n            <ccl:Price>10</ccl:Price>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n            <!--Optional:-->\r\n            <ccl:LineItemNumber>1</ccl:LineItemNumber>\r\n         </ccl:lineItem>\r\n      </ccl:CreatePieceLineItemByTrackingReference>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CreatePieceLineItemByTrackingReference2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f917b402-d850-4b9c-b7bc-915640628f96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CreatePieceLineItemByTrackingReference\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CreatePieceLineItemByTrackingReference>\r\n         <!--Optional:-->\r\n         <ccl:trackingReference>{{trackingReference}}</ccl:trackingReference>\r\n         <!--Optional:-->\r\n         <ccl:lineItem>\r\n           <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n            <!--Optional:-->\r\n            <ccl:DescriptionOfGoods>TestingDescription</ccl:DescriptionOfGoods>\r\n            <!--Optional:-->\r\n            <ccl:Sku>SKU2</ccl:Sku>\r\n            <ccl:Quantity>2</ccl:Quantity>\r\n            <ccl:Weight>20</ccl:Weight>\r\n            <!--Optional:-->\r\n            <ccl:ProductName>RobbieTestProductTwo</ccl:ProductName>\r\n            <ccl:Price>20</ccl:Price>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CommodityCode>87654321</ccl:CommodityCode>\r\n            <!--Optional:-->\r\n            <ccl:LineItemNumber>2</ccl:LineItemNumber>\r\n         </ccl:lineItem>\r\n      </ccl:CreatePieceLineItemByTrackingReference>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CheckTwoCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var lineItemResult = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Id;\r",
									"var lineItemResult2  = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Id;\r",
									"\r",
									"var skuOne = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Sku;\r",
									"var weight = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Weight;\r",
									"var price = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Price;\r",
									"var skuTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Sku;\r",
									"var weightTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Weight;\r",
									"var priceTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Price;\r",
									"\r",
									"pm.variables.set(\"lineItemId\", lineItemResult);\r",
									"pm.variables.set(\"lineItemIdTwo\", lineItemResult2);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKU1 is present\", function () {\r",
									"        pm.expect(skuOne).to.eql(\"SKU1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Weight is 10\", function () {\r",
									"        pm.expect(weight).to.eql(\"10.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Price is 10\", function () {\r",
									"        pm.expect(price).to.eql(\"10.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKU2 is present\", function () {\r",
									"        pm.expect(skuTwo).to.eql(\"SKU2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Second Weight is 20\", function () {\r",
									"        pm.expect(weightTwo).to.eql(\"20.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Second Price is 20\", function () {\r",
									"        pm.expect(priceTwo).to.eql(\"20.000\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1bc69805-cb9a-485c-89fb-f8c55de5af35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllLineItems>\r\n         <ccl:pieceId>{{pieceId}}</ccl:pieceId>\r\n      </ccl:GetAllLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "DeleteLineItems",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f2ea182e-0603-4db8-b8b3-9c721f374dad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/DeleteLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:DeleteLineItems>\r\n         <!--Optional:-->\r\n         <ccl:lineItems>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:WebServiceLineItem>\r\n               <ccl:Id>{{lineItemId}}</ccl:Id>\r\n            </ccl:WebServiceLineItem>\r\n             <ccl:WebServiceLineItem>\r\n               <ccl:Id>{{lineItemIdTwo}}</ccl:Id>\r\n            </ccl:WebServiceLineItem>\r\n         </ccl:lineItems>\r\n      </ccl:DeleteLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CheckTwoDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var lineItems = body[\"GetAllLineItemsResponse\"][\"GetAllLineItemsResult\"][\"WebServiceLineItem\"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Line items have been deleted\", function(){\r",
									"        _.each(lineItems, (lineItem) => {\r",
									"            pm.expect(lineItem.Id).to.not.equal(pm.variables.get(\"lineItemId\"));\r",
									"            pm.expect(lineItem.Id).to.not.equal(pm.variables.get(\"lineItemIdTwo\"));\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f6299e9c-43f0-4f08-a647-7beb2505a4a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllLineItems>\r\n         <ccl:pieceId>{{pieceId}}</ccl:pieceId>\r\n      </ccl:GetAllLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CreateMultipleLineItems",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6030ba24-cf3e-4644-9c9f-af92e990f244",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CreateUpdateDeleteLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CreateUpdateDeleteLineItems>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n         <!--Optional:-->\r\n         <ccl:containerReference>{{trackingReference}}</ccl:containerReference>\r\n         <!--Optional:-->\r\n         <ccl:data>\r\n            <!--Optional:-->\r\n            <ccl:Added>\r\n               <!--Zero or more repetitions:-->\r\n               <ccl:WebServiceLineItem>\r\n            <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n            <!--Optional:-->\r\n            <ccl:DescriptionOfGoods>TestingDescription</ccl:DescriptionOfGoods>\r\n            <!--Optional:-->\r\n            <ccl:Sku>SKU1</ccl:Sku>\r\n            <ccl:Quantity>1</ccl:Quantity>\r\n            <ccl:Weight>10</ccl:Weight>\r\n            <!--Optional:-->\r\n            <ccl:ProductName>RobbieTestProduct</ccl:ProductName>\r\n            <ccl:Price>10</ccl:Price>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n            <!--Optional:-->\r\n            <ccl:LineItemNumber>1</ccl:LineItemNumber>\r\n               </ccl:WebServiceLineItem>\r\n              <ccl:WebServiceLineItem>\r\n            <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n            <!--Optional:-->\r\n            <ccl:DescriptionOfGoods>TestingDescription</ccl:DescriptionOfGoods>\r\n            <!--Optional:-->\r\n            <ccl:Sku>SKU2</ccl:Sku>\r\n            <ccl:Quantity>2</ccl:Quantity>\r\n            <ccl:Weight>20</ccl:Weight>\r\n            <!--Optional:-->\r\n            <ccl:ProductName>RobbieTestProduct2</ccl:ProductName>\r\n            <ccl:Price>20</ccl:Price>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n            <!--Optional:-->\r\n            <ccl:LineItemNumber>2</ccl:LineItemNumber>\r\n               </ccl:WebServiceLineItem>\r\n              <ccl:WebServiceLineItem>\r\n            <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n            <!--Optional:-->\r\n            <ccl:DescriptionOfGoods>TestingDescription</ccl:DescriptionOfGoods>\r\n            <!--Optional:-->\r\n            <ccl:Sku>SKU3</ccl:Sku>\r\n            <ccl:Quantity>3</ccl:Quantity>\r\n            <ccl:Weight>30</ccl:Weight>\r\n            <!--Optional:-->\r\n            <ccl:ProductName>RobbieTestProduct3</ccl:ProductName>\r\n            <ccl:Price>30</ccl:Price>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n            <!--Optional:-->\r\n            <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n            <!--Optional:-->\r\n            <ccl:LineItemNumber>3</ccl:LineItemNumber>\r\n               </ccl:WebServiceLineItem>\r\n            </ccl:Added>\r\n            <!--Optional:-->\r\n            <ccl:Edited>\r\n               <!--Zero or more repetitions:-->\r\n            </ccl:Edited>\r\n            <!--Optional:-->\r\n            <ccl:Deleted>\r\n            </ccl:Deleted>\r\n         </ccl:data>\r\n      </ccl:CreateUpdateDeleteLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CheckAllCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var lineItemResult = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Id;\r",
									"var lineItemResult2 = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Id;\r",
									"var lineItemResult3 = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].Id;\r",
									"\r",
									"pm.variables.set(\"lineItemId\", lineItemResult);\r",
									"pm.variables.set(\"lineItemIdTwo\", lineItemResult2);\r",
									"pm.variables.set(\"lineItemIdThree\", lineItemResult3);\r",
									"\r",
									"var skuOne = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Sku;\r",
									"var weight = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Weight;\r",
									"var price = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Price;\r",
									"var skuTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Sku;\r",
									"var weightTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Weight;\r",
									"var priceTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Price;\r",
									"var skuThree = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].Sku;\r",
									"var weightThree = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].Weight;\r",
									"var priceThree = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].Price;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKU1 is present\", function () {\r",
									"        pm.expect(skuOne).to.eql(\"SKU1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Weight is 10\", function () {\r",
									"        pm.expect(weight).to.eql(\"10.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Price is 10\", function () {\r",
									"        pm.expect(price).to.eql(\"10.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKU2 is present\", function () {\r",
									"        pm.expect(skuTwo).to.eql(\"SKU2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Second Weight is 20\", function () {\r",
									"        pm.expect(weightTwo).to.eql(\"20.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Second Price is 20\", function () {\r",
									"        pm.expect(priceTwo).to.eql(\"20.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKU3 is present\", function () {\r",
									"        pm.expect(skuThree).to.eql(\"SKU3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Third Weight is 30\", function () {\r",
									"        pm.expect(weightThree).to.eql(\"30.000\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Third Price is 30\", function () {\r",
									"        pm.expect(priceThree).to.eql(\"30.000\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "44af869d-8066-41ed-9f08-dfdba2076f3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllLineItems>\r\n         <ccl:pieceId>{{pieceId}}</ccl:pieceId>\r\n      </ccl:GetAllLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "UpdateMultipleLineItems",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57107768-0b07-486a-9b19-b867d184b3a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CreateUpdateDeleteLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CreateUpdateDeleteLineItems>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n         <!--Optional:-->\r\n         <ccl:containerReference>{{trackingReference}}</ccl:containerReference>\r\n         <!--Optional:-->\r\n         <ccl:data>\r\n            <!--Optional:-->\r\n            <ccl:Added>\r\n               <!--Zero or more repetitions:-->\r\n               \r\n            </ccl:Added>\r\n            <!--Optional:-->\r\n            <ccl:Edited>\r\n                <!--Zero or more repetitions:-->\r\n                <ccl:WebServiceLineItem>\r\n                    <ccl:Id>{{lineItemId}}</ccl:Id>\r\n                    <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n                    <!--Optional:-->\r\n                    <ccl:DescriptionOfGoods>TestingDescriptionUpdate1</ccl:DescriptionOfGoods>\r\n                    <!--Optional:-->\r\n                    <ccl:Sku>SKUUpdate1</ccl:Sku>\r\n                    <ccl:Quantity>1</ccl:Quantity>\r\n                    <ccl:Weight>15</ccl:Weight>\r\n                    <!--Optional:-->\r\n                    <ccl:ProductName>RobbieTestProductUpdate1</ccl:ProductName>\r\n                    <ccl:Price>15</ccl:Price>\r\n                    <!--Optional:-->\r\n                    <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n                    <!--Optional:-->\r\n                    <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n                    <!--Optional:-->\r\n                    <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n                    <!--Optional:-->\r\n                    <ccl:LineItemNumber>1</ccl:LineItemNumber>\r\n                </ccl:WebServiceLineItem>\r\n                <ccl:WebServiceLineItem>\r\n                    <ccl:Id>{{lineItemIdTwo}}</ccl:Id>\r\n                    <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n                    <!--Optional:-->\r\n                    <ccl:DescriptionOfGoods>TestingDescriptionUpdate2</ccl:DescriptionOfGoods>\r\n                    <!--Optional:-->\r\n                    <ccl:Sku>SKUUpdate2</ccl:Sku>\r\n                    <ccl:Quantity>2</ccl:Quantity>\r\n                    <ccl:Weight>25</ccl:Weight>\r\n                    <!--Optional:-->\r\n                    <ccl:ProductName>RobbieTestProductUpdate2</ccl:ProductName>\r\n                    <ccl:Price>25</ccl:Price>\r\n                    <!--Optional:-->\r\n                    <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n                    <!--Optional:-->\r\n                    <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n                    <!--Optional:-->\r\n                    <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n                    <!--Optional:-->\r\n                    <ccl:LineItemNumber>2</ccl:LineItemNumber>\r\n                </ccl:WebServiceLineItem>\r\n                <ccl:WebServiceLineItem>\r\n                    <ccl:Id>{{lineItemIdThree}}</ccl:Id>\r\n                    <ccl:PieceId>{{pieceId}}</ccl:PieceId>\r\n                    <!--Optional:-->\r\n                    <ccl:DescriptionOfGoods>TestingDescriptionUpdate3</ccl:DescriptionOfGoods>\r\n                    <!--Optional:-->\r\n                    <ccl:Sku>SKUUpdate3</ccl:Sku>\r\n                    <ccl:Quantity>3</ccl:Quantity>\r\n                    <ccl:Weight>35</ccl:Weight>\r\n                    <!--Optional:-->\r\n                    <ccl:ProductName>RobbieTestProductUpdate3</ccl:ProductName>\r\n                    <ccl:Price>35</ccl:Price>\r\n                    <!--Optional:-->\r\n                    <ccl:CountryOfOriginIso2Code>GB</ccl:CountryOfOriginIso2Code>\r\n                    <!--Optional:-->\r\n                    <ccl:CountryOfManufactureIso2Code>GB</ccl:CountryOfManufactureIso2Code>\r\n                    <!--Optional:-->\r\n                    <ccl:CommodityCode>12345678</ccl:CommodityCode>\r\n                    <!--Optional:-->\r\n                    <ccl:LineItemNumber>3</ccl:LineItemNumber>\r\n                </ccl:WebServiceLineItem>\r\n            </ccl:Edited>\r\n            <!--Optional:-->\r\n            <ccl:Deleted>\r\n            </ccl:Deleted>\r\n         </ccl:data>\r\n      </ccl:CreateUpdateDeleteLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CheckAllUpdated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var lineItemResult = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Id;\r",
									"var lineItemResult2 = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Id;\r",
									"var lineItemResult3 = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].Id;\r",
									"\r",
									"pm.variables.set(\"lineItemId\", lineItemResult);\r",
									"pm.variables.set(\"lineItemIdTwo\", lineItemResult2);\r",
									"pm.variables.set(\"lineItemIdThree\", lineItemResult3);\r",
									"\r",
									"var skuOne = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].Sku;\r",
									"var productName = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].ProductName;\r",
									"var descOfGoods = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[1].DescriptionOfGoods;\r",
									"var skuTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].Sku;\r",
									"var productNameTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].ProductName;\r",
									"var descOfGoodsTwo = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[2].DescriptionOfGoods;\r",
									"var skuThree = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].Sku;\r",
									"var productNameThree = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].ProductName;\r",
									"var descOfGoodsThree = body.GetAllLineItemsResponse.GetAllLineItemsResult.WebServiceLineItem[3].DescriptionOfGoods;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKUUpdate1 is present\", function () {\r",
									"        pm.expect(skuOne).to.eql(\"SKUUpdate1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"productName is now RobbieTestProductUpdate1\", function () {\r",
									"        pm.expect(productName).to.eql(\"RobbieTestProductUpdate1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"descOfGoods is now TestingDescriptionUpdate1\", function () {\r",
									"        pm.expect(descOfGoods).to.eql(\"TestingDescriptionUpdate1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKUUpdate2 is present\", function () {\r",
									"        pm.expect(skuTwo).to.eql(\"SKUUpdate2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"productNameTwo is now RobbieTestProductUpdate2\", function () {\r",
									"        pm.expect(productNameTwo).to.eql(\"RobbieTestProductUpdate2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"descOfGoodsTwo is now TestingDescriptionUpdate2\", function () {\r",
									"        pm.expect(descOfGoodsTwo).to.eql(\"TestingDescriptionUpdate2\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKUUpdate3 is present\", function () {\r",
									"        pm.expect(skuThree).to.eql(\"SKUUpdate3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"productNameThree is now RobbieTestProductUpdate3\", function () {\r",
									"        pm.expect(productNameThree).to.eql(\"RobbieTestProductUpdate3\");\r",
									"    });\r",
									"\r",
									"pm.test(\"descOfGoodsThree is now TestingDescriptionUpdate3\", function () {\r",
									"        pm.expect(descOfGoodsThree).to.eql(\"TestingDescriptionUpdate3\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4573ee59-6337-4f3d-85ea-f17bca3fa199",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllLineItems>\r\n         <ccl:pieceId>{{pieceId}}</ccl:pieceId>\r\n      </ccl:GetAllLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "DeleteMultipleLineItems",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fbd3d68d-f797-4d54-8cec-06be2dbe4bd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CreateUpdateDeleteLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CreateUpdateDeleteLineItems>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n         <!--Optional:-->\r\n         <ccl:containerReference>{{trackingReference}}</ccl:containerReference>\r\n         <!--Optional:-->\r\n         <ccl:data>\r\n            <!--Optional:-->\r\n            <ccl:Added>\r\n               <!--Zero or more repetitions:-->\r\n            </ccl:Added>\r\n            <!--Optional:-->\r\n            <ccl:Edited>\r\n               <!--Zero or more repetitions:-->\r\n            </ccl:Edited>\r\n            <!--Optional:-->\r\n            <ccl:Deleted>\r\n            <ccl:WebServiceLineItem>\r\n            <ccl:Id>{{lineItemId}}</ccl:Id>\r\n               </ccl:WebServiceLineItem>\r\n              <ccl:WebServiceLineItem>\r\n              <ccl:Id>{{lineItemIdTwo}}</ccl:Id>\r\n               </ccl:WebServiceLineItem>\r\n              <ccl:WebServiceLineItem>\r\n              <ccl:Id>{{lineItemIdThree}}</ccl:Id>\r\n               </ccl:WebServiceLineItem>\r\n            </ccl:Deleted>\r\n         </ccl:data>\r\n      </ccl:CreateUpdateDeleteLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				},
				{
					"name": "CheckAllDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var lineItems = body[\"GetAllLineItemsResponse\"][\"GetAllLineItemsResult\"][\"WebServiceLineItem\"];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Line items have been deleted\", function(){\r",
									"        _.each(lineItems, (lineItem) => {\r",
									"            pm.expect(lineItem.Id).to.not.equal(pm.variables.get(\"lineItemId\"));\r",
									"            pm.expect(lineItem.Id).to.not.equal(pm.variables.get(\"lineItemIdTwo\"));\r",
									"            pm.expect(lineItem.Id).to.not.equal(pm.variables.get(\"lineItemIdThree\"));\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fef74fca-a26b-4a4a-8fcf-15beaa9e4add",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetAllLineItems\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetAllLineItems>\r\n         <ccl:pieceId>{{pieceId}}</ccl:pieceId>\r\n      </ccl:GetAllLineItems>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{lineItem}}"
					},
					"response": []
				}
			],
			"id": "87e61555-47b5-46a9-8f73-7c45197bcfc3"
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "GetBookingAccountNumberFromPickupReference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1346851a-40e6-4f33-8bb1-b64590de340c",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var bookingNumber = body.GetBookingAccountNumberFromPickupReferenceResponse.GetBookingAccountNumberFromPickupReferenceResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Is bookingNumber 951019960?\", function () {\r",
									"        pm.expect(bookingNumber).to.eql(\"951019960\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ab7dbb03-4d16-4e6f-bb79-5e75fdd7a16d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_WebService/GetBookingAccountNumberFromPickupReference\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetBookingAccountNumberFromPickupReference>\r\n         <ccl:supplierId>558</ccl:supplierId>\r\n         <!--Optional:-->\r\n         <ccl:pickupReference>AME230125001383_ZYP_AM</ccl:pickupReference>\r\n      </ccl:GetBookingAccountNumberFromPickupReference>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{service}}"
					},
					"response": []
				},
				{
					"name": "GetSupplierServiceCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1346851a-40e6-4f33-8bb1-b64590de340c",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var supplierCode = body.GetSupplierServiceCodeResponse.GetSupplierServiceCodeResult.SupplierCode;\r",
									"var ebosId = body.GetSupplierServiceCodeResponse.GetSupplierServiceCodeResult.EbosID;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Is supplierCode 1?\", function () {\r",
									"        pm.expect(supplierCode).to.eql(\"1\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Is ebosId 1?\", function () {\r",
									"        pm.expect(ebosId).to.eql(\"1\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "592fec94-3ef6-4236-bad3-75b57190268c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_WebService/GetSupplierServiceCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetSupplierServiceCode>\r\n         <ccl:supplierID>33</ccl:supplierID>\r\n         <!--Optional:-->\r\n         <ccl:ebosServiceCode>ND1800</ccl:ebosServiceCode>\r\n      </ccl:GetSupplierServiceCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{service}}"
					},
					"response": []
				},
				{
					"name": "FirstValidPickupDateFrom",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61a7bcc9-326c-4126-bf7e-1ecc05283b7a",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var firstValidPickupDateFrom = body.FirstValidPickupDateFromResponse.FirstValidPickupDateFromResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"First Valid Pickup Date From is 2022-01-04T00:00:00\", function () {\r",
									"        pm.expect(firstValidPickupDateFrom).to.eql(\"2022-01-04T00:00:00\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c1c7f219-dc1a-46dc-87e8-31055696814f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_WebService/FirstValidPickupDateFrom\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:FirstValidPickupDateFrom>\r\n         <ccl:fromDate>2022-01-01</ccl:fromDate>\r\n         <ccl:supplierId>933</ccl:supplierId>\r\n      </ccl:FirstValidPickupDateFrom>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{service}}"
					},
					"response": []
				},
				{
					"name": "IsTwoMan",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf891d7f-f292-44d1-b310-efe6ebaf1053",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var isTwoMan = body.IsTwoManResponse.IsTwoManResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isTwoMan is true\", function () {\r",
									"        pm.expect(isTwoMan).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d823baef-da78-4258-8300-34110950fefb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_WebService/IsTwoMan\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsTwoMan>\r\n         <!--Optional:-->\r\n         <ccl:serviceCode>DXFREIGHT:C1</ccl:serviceCode>\r\n      </ccl:IsTwoMan>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{service}}"
					},
					"response": []
				},
				{
					"name": "IsValidDeliveryDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7fb2be3-92f1-48bc-821d-7500b98c73b9",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var isValidDeliveryDate = body.IsValidDeliveryDateResponse.IsValidDeliveryDateResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"isValidDeliveryDate is true\", function () {\r",
									"        pm.expect(isValidDeliveryDate).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e1d82338-a12a-4ac1-be8b-fec30d531858",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_WebService/IsValidDeliveryDate\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:IsValidDeliveryDate>\r\n         <ccl:deliveryDate>2022-04-28</ccl:deliveryDate>\r\n      </ccl:IsValidDeliveryDate>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{service}}"
					},
					"response": []
				}
			],
			"id": "2c1cff2c-07cc-40a3-9aeb-c1118dd0d9db"
		},
		{
			"name": "Utilities",
			"item": [
				{
					"name": "GetHolidays",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cda485fe-45be-4e21-8fb4-c4750a28b0c5",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var holidayFromOne = body.GetHolidaysResponse.GetHolidaysResult.dateTime[0];\r",
									"var holidayFromTwo = body.GetHolidaysResponse.GetHolidaysResult.dateTime[1];\r",
									"var holidayFromThree = body.GetHolidaysResponse.GetHolidaysResult.dateTime[2];\r",
									"console.log(holidayFromTwo);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Holiday One is From is 01-01-2022 until 03-01-2022\", function () {\r",
									"        pm.expect(holidayFromOne).to.eql(\"2022-01-01T00:00:00\");\r",
									"        pm.expect(holidayFromTwo).to.eql(\"2022-01-02T00:00:00\");\r",
									"        pm.expect(holidayFromThree).to.eql(\"2022-01-03T00:00:00\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b0f40fe4-a5d1-4b5b-a64e-f07d7ae03558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetHolidays\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetHolidays>\r\n         <tem:from>2022-01-01</tem:from>\r\n         <tem:to>2022-01-05</tem:to>\r\n      </tem:GetHolidays>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "GetMandatorySettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c31fc64-e5d7-4f1b-ab66-8482732320e1",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shipFromVatNo = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryCIFieldsForSupplier.ShipFromVatNo;\r",
									"var shipFromEoriNo = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryCIFieldsForSupplier.ShipFromEoriNo;\r",
									"var shipFromVatOrEori = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryCIFieldsForSupplier.ShipFromVatOrEori;\r",
									"var descriptionOfGoods = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryCIFieldsForSupplier.DescriptionOfGoods;\r",
									"var totalValueOfGoods = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryCIFieldsForSupplier.TotalValueOfGoods;\r",
									"var reasonForExport = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryCIFieldsForSupplier.ReasonForExport;\r",
									"var batteriesPresent = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryCIFieldsForSupplier.BatteriesPresent;\r",
									"var boxId = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryLineItemFieldsForSupplier.BoxId;\r",
									"var sku = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryLineItemFieldsForSupplier.SKU;\r",
									"var countryOfOrigin = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryLineItemFieldsForSupplier.CountryOfOrigin;\r",
									"var countryOfManufacture = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryLineItemFieldsForSupplier.CountryOfManufacture;\r",
									"var noOfUnits = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryLineItemFieldsForSupplier.NoOfUnits;\r",
									"var commodityCode = body.GetMandatorySettingsResponse.GetMandatorySettingsResult.MandatoryLineItemFieldsForSupplier.CommodityCode;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShipFromVatNo is false?\", function () {\r",
									"        pm.expect(shipFromVatNo).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShipFromEoriNo is false?\", function () {\r",
									"        pm.expect(shipFromEoriNo).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ShipFromVatOrEori is false?\", function () {\r",
									"        pm.expect(shipFromVatOrEori).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Description Of Goods is true?\", function () {\r",
									"        pm.expect(descriptionOfGoods).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Total Value Of Goods is true?\", function () {\r",
									"        pm.expect(totalValueOfGoods).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Reason for Export is true?\", function () {\r",
									"        pm.expect(reasonForExport).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Batteries Present is true?\", function () {\r",
									"        pm.expect(batteriesPresent).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Box ID is true?\", function () {\r",
									"        pm.expect(boxId).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"SKU is false?\", function () {\r",
									"        pm.expect(sku).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country of Origin is true?\", function () {\r",
									"        pm.expect(countryOfOrigin).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Country of Manufacture is false?\", function () {\r",
									"        pm.expect(countryOfManufacture).to.eql(\"false\");\r",
									"    });\r",
									"\r",
									"pm.test(\"No of Units is true?\", function () {\r",
									"        pm.expect(noOfUnits).to.eql(\"true\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Commodity Code is true?\", function () {\r",
									"        pm.expect(commodityCode).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1f8c1144-6bdd-440a-acd8-e79a983e8b39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetMandatorySettings\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetMandatorySettings>\r\n         <tem:supplierId>933</tem:supplierId>\r\n      </tem:GetMandatorySettings>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "GetReasonForExportMappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d5c7de1-24d5-494a-9ad1-4a2dd2590546",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var cclReasonForExportOne = body.GetReasonForExportMappingsResponse.GetReasonForExportMappingsResult.ReasonForExportMapping[0].CCLReasonForExport;\r",
									"var cclReasonForExportTwo = body.GetReasonForExportMappingsResponse.GetReasonForExportMappingsResult.ReasonForExportMapping[1].CCLReasonForExport;\r",
									"var cclReasonForExportThree = body.GetReasonForExportMappingsResponse.GetReasonForExportMappingsResult.ReasonForExportMapping[2].CCLReasonForExport;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"cclReasonForExportOne is sale?\", function () {\r",
									"        pm.expect(cclReasonForExportOne).to.eql(\"sale\");\r",
									"    });\r",
									"\r",
									"pm.test(\"cclReasonForExportTwo is sale?\", function () {\r",
									"        pm.expect(cclReasonForExportTwo).to.eql(\"return\");\r",
									"    });\r",
									"\r",
									"pm.test(\"cclReasonForExportThree is sale?\", function () {\r",
									"        pm.expect(cclReasonForExportThree).to.eql(\"gift\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "81834185-f10d-489d-8a00-cb3bf054aefb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetReasonForExportMappings\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetReasonForExportMappings>\r\n         <tem:supplierId>933</tem:supplierId>\r\n      </tem:GetReasonForExportMappings>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "GetShipmentGroupFromShipmentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b347a60-c099-4757-9f99-3495184b23b9",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shipmentGroup = body.GetShipmentGroupFromShipmentIdResponse.GetShipmentGroupFromShipmentIdResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Shipment Group is PCL?\", function () {\r",
									"        pm.expect(shipmentGroup).to.eql(\"PCL\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "610adb12-6604-40f7-81ee-d2d3180a99f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetShipmentGroupFromShipmentId\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetShipmentGroupFromShipmentId>\r\n         <tem:shipmentId>1</tem:shipmentId>\r\n      </tem:GetShipmentGroupFromShipmentId>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "GetShipmentGroupFromShipmentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e456d4-f1d6-4d68-b650-abe5180168ca",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shipmentGroup = body.GetShipmentGroupFromShipmentTypeResponse.GetShipmentGroupFromShipmentTypeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Shipment Group is PCL?\", function () {\r",
									"        pm.expect(shipmentGroup).to.eql(\"PCL\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bcfa8d5c-a59b-45c2-9aa7-ea67e4ec6988",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetShipmentGroupFromShipmentType\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetShipmentGroupFromShipmentType>\r\n         <!--Optional:-->\r\n         <tem:shipmentType>Parcel</tem:shipmentType>\r\n      </tem:GetShipmentGroupFromShipmentType>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "GetShipmentTypeCodesFromShipmentGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9766993c-4a66-4020-844c-83ab3287b34b",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shipmentTypeCodeTwo = body.GetShipmentTypeCodesFromShipmentGroupResponse.GetShipmentTypeCodesFromShipmentGroupResult.string[1];\r",
									"var shipmentTypeCodeThree = body.GetShipmentTypeCodesFromShipmentGroupResponse.GetShipmentTypeCodesFromShipmentGroupResult.string[4];\r",
									"var shipmentTypeCodeFour = body.GetShipmentTypeCodesFromShipmentGroupResponse.GetShipmentTypeCodesFromShipmentGroupResult.string[5];\r",
									"var shipmentTypeCodeFive = body.GetShipmentTypeCodesFromShipmentGroupResponse.GetShipmentTypeCodesFromShipmentGroupResult.string[7];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"shipmentTypeCodeTwo is parcel\", function () {\r",
									"        pm.expect(shipmentTypeCodeTwo).to.eql(\"parcel\");\r",
									"    });\r",
									"\r",
									"pm.test(\"shipmentTypeCodeThree is parcel-freight\", function () {\r",
									"        pm.expect(shipmentTypeCodeThree).to.eql(\"parcel-freight\");\r",
									"    });\r",
									"\r",
									"pm.test(\"shipmentTypeCodeFour is mail\", function () {\r",
									"        pm.expect(shipmentTypeCodeFour).to.eql(\"mail\");\r",
									"    });\r",
									"\r",
									"pm.test(\"shipmentTypeCodeFive is expresspak\", function () {\r",
									"        pm.expect(shipmentTypeCodeFive).to.eql(\"expresspak\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "21e0815f-afe6-439a-a440-c8430c9da715",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetShipmentTypeCodesFromShipmentGroup\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetShipmentTypeCodesFromShipmentGroup>\r\n         <!--Optional:-->\r\n         <tem:shipmentGroup>PCL</tem:shipmentGroup>\r\n      </tem:GetShipmentTypeCodesFromShipmentGroup>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "GetSupplierLabelData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "544f4f93-f81f-4d4a-a87c-a8770e094b23",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var id = body.GetSupplierLabelDataResponse.GetSupplierLabelDataResult.Id;\r",
									"var supplierId = body.GetSupplierLabelDataResponse.GetSupplierLabelDataResult.SupplierId;\r",
									"var type = body.GetSupplierLabelDataResponse.GetSupplierLabelDataResult.Type;\r",
									"var orientation = body.GetSupplierLabelDataResponse.GetSupplierLabelDataResult.Orientation;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"ID is 0?\", function () {\r",
									"        pm.expect(id).to.eql(\"0\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Supplier ID is 933?\", function () {\r",
									"        pm.expect(supplierId).to.eql(\"933\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Type is label/6x4/concatenated?\", function () {\r",
									"        pm.expect(type).to.eql(\"label/6x4/concatenated\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Orientation is 1?\", function () {\r",
									"        pm.expect(orientation).to.eql(\"1\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0880bd7e-b4e8-4b45-b973-4e312e1e0714",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetSupplierLabelData\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetSupplierLabelData>\r\n         <tem:supplierId>933</tem:supplierId>\r\n      </tem:GetSupplierLabelData>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "IsHolidayDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ada1be-dbc4-4d52-8d54-d1c5e6dcb4a8",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var isHolidayDate = body.IsHolidayDateResponse.IsHolidayDateResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"IsHolidayDateResult is true?\", function () {\r",
									"        pm.expect(isHolidayDate).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57c62296-a13d-4d9d-a161-2211c9afcb86",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/IsHolidayDate\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:IsHolidayDate>\r\n         <tem:testDate>2022-01-01</tem:testDate>\r\n      </tem:IsHolidayDate>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				},
				{
					"name": "GetAllShipmentTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdbe63ca-4ac7-4a27-97bb-6fcdc4c2c609",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var shipmentTypes = body[\"GetAllShipmentTypesResponse\"][\"GetAllShipmentTypesResult\"][\"ShipmentType\"];\r",
									"var shipGroup = body.GetAllShipmentTypesResponse.GetAllShipmentTypesResult.ShipmentType[0].ShipmentGroup;\r",
									"console.log(shipGroup.length);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Response contains ShipmentGroups\", function() {\r",
									"        _.each(shipmentTypes, (shipmentType) => {\r",
									"            pm.expect(shipmentType.ShipmentGroup.length).to.be.greaterThan(2);\r",
									"        });\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7dc25ecb-41ea-45be-974f-8c529357e926",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"http://tempuri.org/GetAllShipmentTypes\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <tem:GetAllShipmentTypes/>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{utilities}}"
					},
					"response": []
				}
			],
			"id": "75b99727-5749-4bbf-af2e-72f6b75293d3"
		},
		{
			"name": "Pricing",
			"item": [
				{
					"name": "GetCollectionAndDeliveryZones",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var code = body.GetCollectionAndDeliveryZonesResponse.GetCollectionAndDeliveryZonesResult.string[0];\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"code is A\", function () {\r",
									"        pm.expect(code).to.eql(\"A\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f0f37e04-072b-488d-9693-83798d8ed867",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCollectionAndDeliveryZones\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCollectionAndDeliveryZones>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n         <ccl:shipmentType>2</ccl:shipmentType>\r\n         <ccl:serviceId>11</ccl:serviceId>\r\n         <ccl:collectionDate>{{collectionDate}}</ccl:collectionDate>\r\n         <!--Optional:-->\r\n         <ccl:collectPostcode>ML1 4GW</ccl:collectPostcode>\r\n         <!--Optional:-->\r\n         <ccl:deliverPostcode>10001</ccl:deliverPostcode>\r\n         <!--Optional:-->\r\n         <ccl:customerSupplierAccount></ccl:customerSupplierAccount>\r\n      </ccl:GetCollectionAndDeliveryZones>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{pricingService}}"
					},
					"response": []
				},
				{
					"name": "GetInsuranceCharge",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var insuranceResult = body.GetInsuranceChargeResponse.GetInsuranceChargeResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"insuranceResult is successfully returned?\", function () {\r",
									"        pm.expect(insuranceResult).not.eq(undefined);\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87c584c9-6d08-43a7-bc65-b71a6f3c813a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetInsuranceCharge\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetInsuranceCharge>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:customerId>81353</ccl:customerId>\r\n         <ccl:valueOfGoods>100</ccl:valueOfGoods>\r\n      </ccl:GetInsuranceCharge>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{pricingService}}"
					},
					"response": []
				},
				{
					"name": "GetInsuranceCost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var insuranceResult = body.GetInsuranceCostResponse.GetInsuranceCostResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"insuranceResult is successfully returned?\", function () {\r",
									"        pm.expect(insuranceResult).not.eq(undefined);\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b59c374c-a022-4c82-ac0e-3fcc064a9cbc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetInsuranceCost\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetInsuranceCost>\r\n         <ccl:carrierId>33</ccl:carrierId>\r\n         <ccl:valueOfGoods>100</ccl:valueOfGoods>\r\n      </ccl:GetInsuranceCost>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{pricingService}}"
					},
					"response": []
				},
				{
					"name": "GetShippingZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var code = body.GetShippingZoneResponse.GetShippingZoneResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"code is A\", function () {\r",
									"        pm.expect(code).to.eql(\"A\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d7dfbf2-5024-42f5-b671-631a6f963931",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetShippingZone\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetShippingZone>\r\n         <ccl:supplierId>33</ccl:supplierId>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n         <ccl:collectionDate>{{collectionDate}}</ccl:collectionDate>\r\n         <!--Optional:-->\r\n         <ccl:collectPostcode>ML1 4GW</ccl:collectPostcode>\r\n         <!--Optional:-->\r\n         <ccl:deliverPostcode>10001</ccl:deliverPostcode>\r\n         <ccl:serviceId>11</ccl:serviceId>\r\n         <ccl:shipmentType>2</ccl:shipmentType>\r\n         <ccl:useSingleItemTariff>true</ccl:useSingleItemTariff>\r\n         <ccl:numberOfUnits>1</ccl:numberOfUnits>\r\n         <ccl:orderWeight>10</ccl:orderWeight>\r\n         <!--Optional:-->\r\n         <ccl:customerSupplierAccount></ccl:customerSupplierAccount>\r\n      </ccl:GetShippingZone>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{pricingService}}"
					},
					"response": []
				},
				{
					"name": "GetPrices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07447330-c503-4e8b-ad0b-98b39ca1e386",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetShippingZone\"",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"CustomerId\": 28037,\r\n\t\"PricingRequests\": [\r\n\t\t{\r\n\t\t\t\"Id\": \"b69fc900-2854-4846-b351-303f4bc5840b\",\r\n\t\t\t\"ServicePricingRequirements\": {\r\n\t\t\t\t\"CustomerId\": 72872,\r\n\t\t\t\t\"ShippingRequirements\": {\r\n\t\t\t\t\t\"ItemType\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentDetails\": {\r\n\t\t\t\t\t\t\"CollectionDate\": \"2023-03-02T00:00:00+00:00\",\r\n\t\t\t\t\t\t\"CollectionAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"TEST COMPANY: The Stationery Box Ltd\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"1-26 Sussex Place\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"London\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"NW1 4SA\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"01292310510\",\r\n\t\t\t\t\t\t\t\"Email\": \"dhenderson@thestationerybox.co.uk\",\r\n\t\t\t\t\t\t\t\"AddressType\": 0,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"DeliveryAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"Ian Test\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"123 Any Road\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"Bellshill\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"ML4 3PB\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"0\",\r\n\t\t\t\t\t\t\t\"Email\": \"\",\r\n\t\t\t\t\t\t\t\"AddressType\": 1,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Pieces\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"PalletSpaces\": null,\r\n\t\t\t\t\t\t\t\t\"Id\": 0,\r\n\t\t\t\t\t\t\t\t\"Weight\": 2.0,\r\n\t\t\t\t\t\t\t\t\"Length\": 4.0,\r\n\t\t\t\t\t\t\t\t\"Width\": 6.0,\r\n\t\t\t\t\t\t\t\t\"Height\": 8.0,\r\n\t\t\t\t\t\t\t\t\"PresetContainerName\": null,\r\n\t\t\t\t\t\t\t\t\"ShipmentType\": {\r\n\t\t\t\t\t\t\t\t\t\"Code\": \"\",\r\n\t\t\t\t\t\t\t\t\t\"Description\": null\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\"ItemType\": \"\",\r\n\t\t\t\t\t\t\t\t\"LineItems\": null,\r\n\t\t\t\t\t\t\t\t\"LineItemDetails\": null,\r\n\t\t\t\t\t\t\t\t\"DescriptionOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"ValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoodsCurrency\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference1\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference2\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference3\": null,\r\n\t\t\t\t\t\t\t\t\"Hazardous\": null,\r\n\t\t\t\t\t\t\t\t\"CustomProperties\": null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"TotalValueOfGoods\": 60.0,\r\n\t\t\t\t\t\t\"Reference1\": null,\r\n\t\t\t\t\t\t\"Reference2\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Options\": {\r\n\t\t\t\t\t\t\"RequiresSignature\": false,\r\n\t\t\t\t\t\t\"Insurance\": false,\r\n\t\t\t\t\t\t\"BookIn\": false,\r\n\t\t\t\t\t\t\"SmsNotification\": \"0\",\r\n\t\t\t\t\t\t\"EmailNotification\": \"\",\r\n\t\t\t\t\t\t\"SpecialInstructions\": \"special check test not broken\",\r\n\t\t\t\t\t\t\"TailLiftCollection\": false,\r\n\t\t\t\t\t\t\"TailLiftDelivery\": false,\r\n\t\t\t\t\t\t\"SpecifiedDeliveryDate\": null,\r\n\t\t\t\t\t\t\"DeliverBefore\": null,\r\n\t\t\t\t\t\t\"BookInAt\": null,\r\n\t\t\t\t\t\t\"BookInWindowDetails\": null,\r\n\t\t\t\t\t\t\"Hazardous\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\t\"Id\": 12,\r\n\t\t\t\t\t\t\"Code\": \"54\",\r\n\t\t\t\t\t\t\"Name\": \"Express Plus\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\t\"OnBehalfOfCustomer\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"Quote\": {\r\n\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\"Id\": 12,\r\n\t\t\t\t\t\"Code\": \"54\",\r\n\t\t\t\t\t\"Name\": \"Express Plus\"\r\n\t\t\t\t},\r\n\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t},\r\n\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\"CarrierServiceCode\": \"ups:54\",\r\n\t\t\t\t\"ItemType\": {\r\n\t\t\t\t\t\"Id\": 2,\r\n\t\t\t\t\t\"Name\": \"Parcel\",\r\n\t\t\t\t\t\"Code\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentGroup\": 0\r\n\t\t\t\t},\r\n\t\t\t\t\"Price\": null,\r\n\t\t\t\t\"DeliveryEstimate\": {\r\n\t\t\t\t\t\"TypeOfDeliveryEstimate\": \"TimedDeliveryEstimate\",\r\n\t\t\t\t\t\"TimedDeliveryEstimate\": \"2023-03-03T09:00:00\",\r\n\t\t\t\t\t\"EndOfDayDeliveryEstimate\": null,\r\n\t\t\t\t\t\"NumberOfDays\": 0,\r\n\t\t\t\t\t\"LatestCollectionTime\": \"2023-03-02T18:00:00\",\r\n\t\t\t\t\t\"DeliveryDays\": 0,\r\n\t\t\t\t\t\"DeliveryTime\": null,\r\n\t\t\t\t\t\"HasSaturdayService\": false,\r\n\t\t\t\t\t\"HasSundayService\": false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Id\": \"21777440-187c-40eb-b323-2f6737c3f193\",\r\n\t\t\t\"ServicePricingRequirements\": {\r\n\t\t\t\t\"CustomerId\": 28037,\r\n\t\t\t\t\"ShippingRequirements\": {\r\n\t\t\t\t\t\"ItemType\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentDetails\": {\r\n\t\t\t\t\t\t\"CollectionDate\": \"2023-03-02T00:00:00+00:00\",\r\n\t\t\t\t\t\t\"CollectionAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"TEST COMPANY: The Stationery Box Ltd\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"1-26 Sussex Place\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"London\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"NW1 4SA\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"01292310510\",\r\n\t\t\t\t\t\t\t\"Email\": \"dhenderson@thestationerybox.co.uk\",\r\n\t\t\t\t\t\t\t\"AddressType\": 0,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"DeliveryAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"Ian Test\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"123 Any Road\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"Bellshill\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"ML4 3PB\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"0\",\r\n\t\t\t\t\t\t\t\"Email\": \"\",\r\n\t\t\t\t\t\t\t\"AddressType\": 1,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Pieces\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"PalletSpaces\": null,\r\n\t\t\t\t\t\t\t\t\"Id\": 0,\r\n\t\t\t\t\t\t\t\t\"Weight\": 2.0,\r\n\t\t\t\t\t\t\t\t\"Length\": 4.0,\r\n\t\t\t\t\t\t\t\t\"Width\": 6.0,\r\n\t\t\t\t\t\t\t\t\"Height\": 8.0,\r\n\t\t\t\t\t\t\t\t\"PresetContainerName\": null,\r\n\t\t\t\t\t\t\t\t\"ShipmentType\": {\r\n\t\t\t\t\t\t\t\t\t\"Code\": \"\",\r\n\t\t\t\t\t\t\t\t\t\"Description\": null\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\"ItemType\": \"\",\r\n\t\t\t\t\t\t\t\t\"LineItems\": null,\r\n\t\t\t\t\t\t\t\t\"LineItemDetails\": null,\r\n\t\t\t\t\t\t\t\t\"DescriptionOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"ValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoodsCurrency\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference1\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference2\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference3\": null,\r\n\t\t\t\t\t\t\t\t\"Hazardous\": null,\r\n\t\t\t\t\t\t\t\t\"CustomProperties\": null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"TotalValueOfGoods\": 60.0,\r\n\t\t\t\t\t\t\"Reference1\": null,\r\n\t\t\t\t\t\t\"Reference2\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Options\": {\r\n\t\t\t\t\t\t\"RequiresSignature\": false,\r\n\t\t\t\t\t\t\"Insurance\": false,\r\n\t\t\t\t\t\t\"BookIn\": false,\r\n\t\t\t\t\t\t\"SmsNotification\": \"0\",\r\n\t\t\t\t\t\t\"EmailNotification\": \"\",\r\n\t\t\t\t\t\t\"SpecialInstructions\": \"special check test not broken\",\r\n\t\t\t\t\t\t\"TailLiftCollection\": false,\r\n\t\t\t\t\t\t\"TailLiftDelivery\": false,\r\n\t\t\t\t\t\t\"SpecifiedDeliveryDate\": null,\r\n\t\t\t\t\t\t\"DeliverBefore\": null,\r\n\t\t\t\t\t\t\"BookInAt\": null,\r\n\t\t\t\t\t\t\"BookInWindowDetails\": null,\r\n\t\t\t\t\t\t\"Hazardous\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\t\"Id\": 10,\r\n\t\t\t\t\t\t\"Code\": \"07\",\r\n\t\t\t\t\t\t\"Name\": \"Express\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\t\"OnBehalfOfCustomer\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"Quote\": {\r\n\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\"Id\": 10,\r\n\t\t\t\t\t\"Code\": \"07\",\r\n\t\t\t\t\t\"Name\": \"Express\"\r\n\t\t\t\t},\r\n\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t},\r\n\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\"CarrierServiceCode\": \"ups:07\",\r\n\t\t\t\t\"ItemType\": {\r\n\t\t\t\t\t\"Id\": 2,\r\n\t\t\t\t\t\"Name\": \"Parcel\",\r\n\t\t\t\t\t\"Code\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentGroup\": 0\r\n\t\t\t\t},\r\n\t\t\t\t\"Price\": null,\r\n\t\t\t\t\"DeliveryEstimate\": {\r\n\t\t\t\t\t\"TypeOfDeliveryEstimate\": \"TimedDeliveryEstimate\",\r\n\t\t\t\t\t\"TimedDeliveryEstimate\": \"2023-03-03T10:30:00\",\r\n\t\t\t\t\t\"EndOfDayDeliveryEstimate\": null,\r\n\t\t\t\t\t\"NumberOfDays\": 0,\r\n\t\t\t\t\t\"LatestCollectionTime\": \"2023-03-02T18:00:00\",\r\n\t\t\t\t\t\"DeliveryDays\": 0,\r\n\t\t\t\t\t\"DeliveryTime\": null,\r\n\t\t\t\t\t\"HasSaturdayService\": false,\r\n\t\t\t\t\t\"HasSundayService\": false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Id\": \"df394980-2d07-4d97-abca-a290b5919e15\",\r\n\t\t\t\"ServicePricingRequirements\": {\r\n\t\t\t\t\"CustomerId\": 28037,\r\n\t\t\t\t\"ShippingRequirements\": {\r\n\t\t\t\t\t\"ItemType\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentDetails\": {\r\n\t\t\t\t\t\t\"CollectionDate\": \"2023-03-02T00:00:00+00:00\",\r\n\t\t\t\t\t\t\"CollectionAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"TEST COMPANY: The Stationery Box Ltd\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"1-26 Sussex Place\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"London\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"NW1 4SA\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"01292310510\",\r\n\t\t\t\t\t\t\t\"Email\": \"dhenderson@thestationerybox.co.uk\",\r\n\t\t\t\t\t\t\t\"AddressType\": 0,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"DeliveryAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"Ian Test\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"123 Any Road\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"Bellshill\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"ML4 3PB\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"0\",\r\n\t\t\t\t\t\t\t\"Email\": \"\",\r\n\t\t\t\t\t\t\t\"AddressType\": 1,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Pieces\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"PalletSpaces\": null,\r\n\t\t\t\t\t\t\t\t\"Id\": 0,\r\n\t\t\t\t\t\t\t\t\"Weight\": 2.0,\r\n\t\t\t\t\t\t\t\t\"Length\": 4.0,\r\n\t\t\t\t\t\t\t\t\"Width\": 6.0,\r\n\t\t\t\t\t\t\t\t\"Height\": 8.0,\r\n\t\t\t\t\t\t\t\t\"PresetContainerName\": null,\r\n\t\t\t\t\t\t\t\t\"ShipmentType\": {\r\n\t\t\t\t\t\t\t\t\t\"Code\": \"\",\r\n\t\t\t\t\t\t\t\t\t\"Description\": null\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\"ItemType\": \"\",\r\n\t\t\t\t\t\t\t\t\"LineItems\": null,\r\n\t\t\t\t\t\t\t\t\"LineItemDetails\": null,\r\n\t\t\t\t\t\t\t\t\"DescriptionOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"ValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoodsCurrency\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference1\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference2\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference3\": null,\r\n\t\t\t\t\t\t\t\t\"Hazardous\": null,\r\n\t\t\t\t\t\t\t\t\"CustomProperties\": null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"TotalValueOfGoods\": 60.0,\r\n\t\t\t\t\t\t\"Reference1\": null,\r\n\t\t\t\t\t\t\"Reference2\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Options\": {\r\n\t\t\t\t\t\t\"RequiresSignature\": false,\r\n\t\t\t\t\t\t\"Insurance\": false,\r\n\t\t\t\t\t\t\"BookIn\": false,\r\n\t\t\t\t\t\t\"SmsNotification\": \"0\",\r\n\t\t\t\t\t\t\"EmailNotification\": \"\",\r\n\t\t\t\t\t\t\"SpecialInstructions\": \"special check test not broken\",\r\n\t\t\t\t\t\t\"TailLiftCollection\": false,\r\n\t\t\t\t\t\t\"TailLiftDelivery\": false,\r\n\t\t\t\t\t\t\"SpecifiedDeliveryDate\": null,\r\n\t\t\t\t\t\t\"DeliverBefore\": null,\r\n\t\t\t\t\t\t\"BookInAt\": null,\r\n\t\t\t\t\t\t\"BookInWindowDetails\": null,\r\n\t\t\t\t\t\t\"Hazardous\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\t\"Id\": 2,\r\n\t\t\t\t\t\t\"Code\": \"65\",\r\n\t\t\t\t\t\t\"Name\": \"Express Saver\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\t\"OnBehalfOfCustomer\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"Quote\": {\r\n\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\"Id\": 2,\r\n\t\t\t\t\t\"Code\": \"65\",\r\n\t\t\t\t\t\"Name\": \"Express Saver\"\r\n\t\t\t\t},\r\n\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t},\r\n\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\"CarrierServiceCode\": \"ups:65\",\r\n\t\t\t\t\"ItemType\": {\r\n\t\t\t\t\t\"Id\": 2,\r\n\t\t\t\t\t\"Name\": \"Parcel\",\r\n\t\t\t\t\t\"Code\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentGroup\": 0\r\n\t\t\t\t},\r\n\t\t\t\t\"Price\": null,\r\n\t\t\t\t\"DeliveryEstimate\": {\r\n\t\t\t\t\t\"TypeOfDeliveryEstimate\": \"TimedDeliveryEstimate\",\r\n\t\t\t\t\t\"TimedDeliveryEstimate\": \"2023-03-03T12:00:00\",\r\n\t\t\t\t\t\"EndOfDayDeliveryEstimate\": null,\r\n\t\t\t\t\t\"NumberOfDays\": 0,\r\n\t\t\t\t\t\"LatestCollectionTime\": \"2023-03-02T18:00:00\",\r\n\t\t\t\t\t\"DeliveryDays\": 0,\r\n\t\t\t\t\t\"DeliveryTime\": null,\r\n\t\t\t\t\t\"HasSaturdayService\": false,\r\n\t\t\t\t\t\"HasSundayService\": false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Id\": \"fd529f51-8348-4df8-90bf-f65883ee48cc\",\r\n\t\t\t\"ServicePricingRequirements\": {\r\n\t\t\t\t\"CustomerId\": 28037,\r\n\t\t\t\t\"ShippingRequirements\": {\r\n\t\t\t\t\t\"ItemType\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentDetails\": {\r\n\t\t\t\t\t\t\"CollectionDate\": \"2023-03-02T00:00:00+00:00\",\r\n\t\t\t\t\t\t\"CollectionAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"TEST COMPANY: The Stationery Box Ltd\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"1-26 Sussex Place\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"London\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"NW1 4SA\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"01292310510\",\r\n\t\t\t\t\t\t\t\"Email\": \"dhenderson@thestationerybox.co.uk\",\r\n\t\t\t\t\t\t\t\"AddressType\": 0,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"DeliveryAddress\": {\r\n\t\t\t\t\t\t\t\"CompanyName\": \"Ian Test\",\r\n\t\t\t\t\t\t\t\"ContactName\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine1\": \"123 Any Road\",\r\n\t\t\t\t\t\t\t\"AddressLine2\": \"\",\r\n\t\t\t\t\t\t\t\"AddressLine3\": \"\",\r\n\t\t\t\t\t\t\t\"Town\": \"Bellshill\",\r\n\t\t\t\t\t\t\t\"Postcode\": \"ML4 3PB\",\r\n\t\t\t\t\t\t\t\"County\": null,\r\n\t\t\t\t\t\t\t\"Country\": {\r\n\t\t\t\t\t\t\t\t\"Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Iso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\t\"Name\": \"United Kingdom\",\r\n\t\t\t\t\t\t\t\t\"VatRate\": 0.0,\r\n\t\t\t\t\t\t\t\t\"EuropeanUnionMember\": false,\r\n\t\t\t\t\t\t\t\t\"European\": false,\r\n\t\t\t\t\t\t\t\t\"IsEuMember\": false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CountryIso2Code\": \"GB\",\r\n\t\t\t\t\t\t\t\"Telephone\": \"0\",\r\n\t\t\t\t\t\t\t\"Email\": \"\",\r\n\t\t\t\t\t\t\t\"AddressType\": 1,\r\n\t\t\t\t\t\t\t\"Location\": null\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Pieces\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"PalletSpaces\": null,\r\n\t\t\t\t\t\t\t\t\"Id\": 0,\r\n\t\t\t\t\t\t\t\t\"Weight\": 2.0,\r\n\t\t\t\t\t\t\t\t\"Length\": 4.0,\r\n\t\t\t\t\t\t\t\t\"Width\": 6.0,\r\n\t\t\t\t\t\t\t\t\"Height\": 8.0,\r\n\t\t\t\t\t\t\t\t\"PresetContainerName\": null,\r\n\t\t\t\t\t\t\t\t\"ShipmentType\": {\r\n\t\t\t\t\t\t\t\t\t\"Code\": \"\",\r\n\t\t\t\t\t\t\t\t\t\"Description\": null\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\"ItemType\": \"\",\r\n\t\t\t\t\t\t\t\t\"LineItems\": null,\r\n\t\t\t\t\t\t\t\t\"LineItemDetails\": null,\r\n\t\t\t\t\t\t\t\t\"DescriptionOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"ValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoods\": null,\r\n\t\t\t\t\t\t\t\t\"LocalValueOfGoodsCurrency\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference1\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference2\": null,\r\n\t\t\t\t\t\t\t\t\"ShippingReference3\": null,\r\n\t\t\t\t\t\t\t\t\"Hazardous\": null,\r\n\t\t\t\t\t\t\t\t\"CustomProperties\": null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"TotalValueOfGoods\": 60.0,\r\n\t\t\t\t\t\t\"Reference1\": null,\r\n\t\t\t\t\t\t\"Reference2\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Options\": {\r\n\t\t\t\t\t\t\"RequiresSignature\": false,\r\n\t\t\t\t\t\t\"Insurance\": false,\r\n\t\t\t\t\t\t\"BookIn\": false,\r\n\t\t\t\t\t\t\"SmsNotification\": \"0\",\r\n\t\t\t\t\t\t\"EmailNotification\": \"\",\r\n\t\t\t\t\t\t\"SpecialInstructions\": \"special check test not broken\",\r\n\t\t\t\t\t\t\"TailLiftCollection\": false,\r\n\t\t\t\t\t\t\"TailLiftDelivery\": false,\r\n\t\t\t\t\t\t\"SpecifiedDeliveryDate\": null,\r\n\t\t\t\t\t\t\"DeliverBefore\": null,\r\n\t\t\t\t\t\t\"BookInAt\": null,\r\n\t\t\t\t\t\t\"BookInWindowDetails\": null,\r\n\t\t\t\t\t\t\"Hazardous\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\t\"Id\": 1,\r\n\t\t\t\t\t\t\"Code\": \"11\",\r\n\t\t\t\t\t\t\"Name\": \"Standard\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\t\"OnBehalfOfCustomer\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"Quote\": {\r\n\t\t\t\t\"Service\": {\r\n\t\t\t\t\t\"Id\": 1,\r\n\t\t\t\t\t\"Code\": \"11\",\r\n\t\t\t\t\t\"Name\": \"Standard\"\r\n\t\t\t\t},\r\n\t\t\t\t\"Supplier\": {\r\n\t\t\t\t\t\"Id\": 33,\r\n\t\t\t\t\t\"Code\": \"ups\",\r\n\t\t\t\t\t\"Name\": \"UPS\",\r\n\t\t\t\t\t\"Parent\": null,\r\n\t\t\t\t\t\"ParentCode\": null\r\n\t\t\t\t},\r\n\t\t\t\t\"CustomerSupplierAccount\": \"33722E\",\r\n\t\t\t\t\"CarrierServiceCode\": \"ups:11\",\r\n\t\t\t\t\"ItemType\": {\r\n\t\t\t\t\t\"Id\": 2,\r\n\t\t\t\t\t\"Name\": \"Parcel\",\r\n\t\t\t\t\t\"Code\": \"parcel\",\r\n\t\t\t\t\t\"ShipmentGroup\": 0\r\n\t\t\t\t},\r\n\t\t\t\t\"Price\": null,\r\n\t\t\t\t\"DeliveryEstimate\": {\r\n\t\t\t\t\t\"TypeOfDeliveryEstimate\": \"EndOfDayDeliveryEstimate\",\r\n\t\t\t\t\t\"TimedDeliveryEstimate\": null,\r\n\t\t\t\t\t\"EndOfDayDeliveryEstimate\": \"2023-03-03T23:30:00\",\r\n\t\t\t\t\t\"NumberOfDays\": 0,\r\n\t\t\t\t\t\"LatestCollectionTime\": \"2023-03-02T17:00:00\",\r\n\t\t\t\t\t\"DeliveryDays\": 0,\r\n\t\t\t\t\t\"DeliveryTime\": null,\r\n\t\t\t\t\t\"HasSaturdayService\": false,\r\n\t\t\t\t\t\"HasSundayService\": false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{urlAuth}}/v1/api/pricing/GetPrices"
					},
					"response": []
				}
			],
			"id": "087ffff1-53b3-4d55-9bab-26ed96ac9c8a"
		},
		{
			"name": "CreateOrderThenSupplierEmail",
			"item": [
				{
					"name": "CreateOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var orderResult = body.CreateOrderResponse.CreateOrderResult;\r",
									"\r",
									"pm.variables.set(\"orderId\", orderResult);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Order Id is successfully returned?\", function() {\r",
									"var jsonData = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"pm.expect(jsonData.CreateOrderResponse.CreateOrderResult).not.eq(undefined);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"pm.variables.set('trackingReference', _.random (10000000, 99999999));\r",
									"\r",
									"\r",
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d4a3c1b2-19e6-44c1-9d43-8c48100e581a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"eBos_Import_WebService/CreateOrder\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ebos=\"eBos_Import_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ebos:CreateOrder>\r\n         <!--Optional:-->\r\n         <ebos:orderDetails>\r\n            <ebos:OrderSourceTypes>Unknown</ebos:OrderSourceTypes>\r\n            <ebos:BookingMethodTypes>Unknown</ebos:BookingMethodTypes>\r\n            <!--Optional:-->\r\n            <ebos:TrackingReference>{{trackingReference}}</ebos:TrackingReference>\r\n            <!--Optional:-->\r\n            <ebos:AccountID>33722E</ebos:AccountID>\r\n            <!--Optional:-->\r\n            <ebos:AccountName></ebos:AccountName>\r\n            <!--Optional:-->\r\n            <ebos:CCLCustomerNo>81353</ebos:CCLCustomerNo>\r\n            <!--Optional:-->\r\n            <ebos:CCLCustomerName></ebos:CCLCustomerName>\r\n            <!--Optional:-->\r\n            <ebos:CCLCustomerSubCustomerRef></ebos:CCLCustomerSubCustomerRef>\r\n            <!--Optional:-->\r\n            <ebos:ShippingStatus></ebos:ShippingStatus>\r\n            <!--Optional:-->\r\n            <ebos:SupplierName>ups</ebos:SupplierName>\r\n            <!--Optional:-->\r\n            <ebos:ServiceName>65</ebos:ServiceName>\r\n            <ebos:ServiceCode>65</ebos:ServiceCode>\r\n            <ebos:Remarks></ebos:Remarks>\r\n            <!--Optional:-->\r\n            <ebos:ShipperAccountNumber>33722E</ebos:ShipperAccountNumber>\r\n            <ebos:LastScanDate></ebos:LastScanDate>\r\n            <!--Optional:-->\r\n            <ebos:LastScanTime></ebos:LastScanTime>\r\n            <!--Optional:-->\r\n            <ebos:AdditionalHistoryInfo></ebos:AdditionalHistoryInfo>\r\n            <!--Optional:-->\r\n            <ebos:SystemID></ebos:SystemID>\r\n            <!--Optional:-->\r\n            <ebos:DeliveryOption></ebos:DeliveryOption>\r\n            <!--Optional:-->\r\n            <ebos:OverseasVatNumber></ebos:OverseasVatNumber>\r\n            <!--Optional:-->\r\n            <ebos:SupplierNote></ebos:SupplierNote>\r\n            <!--Optional:-->\r\n            <ebos:CollectionTailLift></ebos:CollectionTailLift>\r\n            <!--Optional:-->\r\n            <ebos:DeliveryTailLift></ebos:DeliveryTailLift>\r\n            <!--Optional:-->\r\n            <ebos:CollectionLimitedAccess></ebos:CollectionLimitedAccess>\r\n            <!--Optional:-->\r\n            <ebos:DeliveryLimitedAccess></ebos:DeliveryLimitedAccess>\r\n            <!--Optional:-->\r\n            <ebos:CCLTrackingNumber></ebos:CCLTrackingNumber>\r\n            <ebos:LastScanLocation></ebos:LastScanLocation>\r\n            <ebos:SupplierId>33</ebos:SupplierId>\r\n            <!--Optional:-->\r\n            <ebos:OnBehalfOfCustomer></ebos:OnBehalfOfCustomer>\r\n            <!--Optional:-->\r\n            <ebos:Freedom></ebos:Freedom>\r\n            <!--Optional:-->\r\n            <ebos:ShippingRequirements>\r\n               <!--Optional:-->\r\n               <ebos:CollectionAddress>\r\n                  <ebos:Id>81353</ebos:Id>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressId></ebos:AddressId>\r\n                  <!--Optional:-->\r\n                  <ebos:CompanyName>Test Customer: IWS Test Customer</ebos:CompanyName>\r\n                  <!--Optional:-->\r\n                  <ebos:ContactName>Test Customer: IWS Test Customer</ebos:ContactName>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine1>Test Line1</ebos:AddressLine1>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine2>Test Line2</ebos:AddressLine2>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine3>Test Line3</ebos:AddressLine3>\r\n                  <!--Optional:-->\r\n                  <ebos:Town>Kilmarnock</ebos:Town>\r\n                  <!--Optional:-->\r\n                  <ebos:Postcode>KA2 0BA</ebos:Postcode>\r\n                  <!--Optional:-->\r\n                  <ebos:County>\r\n                     <!--Optional:-->\r\n                     <ebos:Code></ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name></ebos:Name>\r\n                  </ebos:County>\r\n                  <!--Optional:-->\r\n                  <ebos:Country>\r\n                     <!--Optional:-->\r\n                     <ebos:Code>GB</ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name>United Kingdom</ebos:Name>\r\n                  </ebos:Country>\r\n                  <!--Optional:-->\r\n                  <ebos:Telephone></ebos:Telephone>\r\n                  <!--Optional:-->\r\n                  <ebos:Email></ebos:Email>\r\n                  <!--Optional:-->\r\n               </ebos:CollectionAddress>\r\n               <!--Optional:-->\r\n               <ebos:DeliveryAddress>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressId></ebos:AddressId>\r\n                  <!--Optional:-->\r\n                  <ebos:CompanyName>CompanyName</ebos:CompanyName>\r\n                  <!--Optional:-->\r\n                  <ebos:ContactName>ContactName</ebos:ContactName>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine1>Test AddressLine1</ebos:AddressLine1>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine2>Test AddressLine2</ebos:AddressLine2>\r\n                  <!--Optional:-->\r\n                  <ebos:AddressLine3>Test AddressLine3</ebos:AddressLine3>\r\n                  <!--Optional:-->\r\n                  <ebos:Town>TownCity</ebos:Town>\r\n                  <!--Optional:-->\r\n                  <ebos:Postcode>ML1 4FN</ebos:Postcode>\r\n                  <!--Optional:-->\r\n                  <ebos:County>\r\n                     <!--Optional:-->\r\n                     <ebos:Code></ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name></ebos:Name>\r\n                  </ebos:County>\r\n                  <!--Optional:-->\r\n                  <ebos:Country>\r\n                     <!--Optional:-->\r\n                     <ebos:Code>GB</ebos:Code>\r\n                     <!--Optional:-->\r\n                     <ebos:Name>United Kingdom</ebos:Name>\r\n                  </ebos:Country>\r\n                  <!--Optional:-->\r\n                  <ebos:Telephone></ebos:Telephone>\r\n                  <!--Optional:-->\r\n                  <ebos:Email></ebos:Email>\r\n                  <!--Optional:-->\r\n               </ebos:DeliveryAddress>\r\n               <!--Optional:-->\r\n               <ebos:FullPieceDetails>\r\n                  <!--Optional:-->\r\n                  <ebos:Pieces>\r\n                     <!--Zero or more repetitions:-->\r\n                     <ebos:PieceDetailSOAP>\r\n                        <ebos:Length>23</ebos:Length>\r\n                        <ebos:Width>14.5</ebos:Width>\r\n                        <ebos:Height>12</ebos:Height>\r\n                        <ebos:Weight>5.5</ebos:Weight>\r\n                        <!--Optional:-->\r\n                        <ebos:TrackingReference></ebos:TrackingReference>\r\n                        <!--Optional:-->\r\n                        <ebos:ShippingReferences>\r\n                        <!--Zero or more repetitions:-->\r\n                           <ebos:string></ebos:string>\r\n                        </ebos:ShippingReferences>\r\n                        <!--Optional:-->\r\n                        <ebos:ShipmentTypeCode></ebos:ShipmentTypeCode>\r\n                     </ebos:PieceDetailSOAP>\r\n                  </ebos:Pieces>\r\n                  <!--Optional:-->\r\n                  <ebos:DescriptionOfGoods>Some interesting goods for testing</ebos:DescriptionOfGoods>\r\n                  <ebos:ValueOfGoods>25.75</ebos:ValueOfGoods>\r\n                  <!--Optional:-->\r\n                  <ebos:ValueOfGoodsCurrency></ebos:ValueOfGoodsCurrency>\r\n               </ebos:FullPieceDetails>\r\n               <!--Optional:-->\r\n               <ebos:ShippingReference>ShipRef1</ebos:ShippingReference>\r\n               <!--Optional:-->\r\n               <ebos:ShippingReference2>ShipRef2</ebos:ShippingReference2>\r\n               <!--Optional:-->\r\n               <ebos:ShippingReference3>ShipRef3</ebos:ShippingReference3>\r\n               <!--Optional:-->\r\n               <ebos:CollectionDate>{{collectionDate}}</ebos:CollectionDate>\r\n               <ebos:DeliveryInstructions></ebos:DeliveryInstructions>\r\n               <!--Optional:-->\r\n               <ebos:CarrierMovementId></ebos:CarrierMovementId>\r\n               <!--Optional:-->\r\n               <ebos:ShippingOptionsDetails>\r\n                  <!--Optional:-->\r\n                  <ebos:NotificationMobileNumber></ebos:NotificationMobileNumber>\r\n                  <!--Optional:-->\r\n                  <ebos:NotificationEmailAddress></ebos:NotificationEmailAddress>\r\n               </ebos:ShippingOptionsDetails>\r\n               <!--Optional:-->\r\n               <ebos:CollectionOptions>\r\n               </ebos:CollectionOptions>\r\n               <!--Optional:-->\r\n               <ebos:BillingOptions>\r\n                  <!--Optional:-->\r\n                  <ebos:DutiesAndTaxes>\r\n                     <!--Optional:-->\r\n                     <ebos:Nickname></ebos:Nickname>\r\n                     <!--Optional:-->\r\n                     <ebos:Postcode></ebos:Postcode>\r\n                     <!--Optional:-->\r\n                     <ebos:AccountNumber></ebos:AccountNumber>\r\n                  </ebos:DutiesAndTaxes>\r\n               </ebos:BillingOptions>\r\n            </ebos:ShippingRequirements>\r\n            <!--Optional:-->\r\n            <ebos:UniqueReference></ebos:UniqueReference>\r\n            <!--Optional:-->\r\n            <ebos:ContractNumber></ebos:ContractNumber>\r\n            <ebos:DataExpiryDate>{{collectionDate}}</ebos:DataExpiryDate>\r\n            <!--Optional:-->\r\n            <ebos:CustomerPrimaryReference>TestCustomerPrimaryReferenceOne</ebos:CustomerPrimaryReference>\r\n         </ebos:orderDetails>\r\n      </ebos:CreateOrder>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{importWsUrl}}/orderimport.asmx"
					},
					"response": []
				},
				{
					"name": "CreatePODRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00c49a96-b0e2-4a2e-843f-fcdad748e048",
								"exec": [
									"var moment = new Date;\r",
									"\r",
									"pm.environment.set('currentdate', moment.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a20b2215-9bc1-4306-b261-8eb7a9921dfa",
								"exec": [
									"try {\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"// pm.test(\"Customer Name is Test Customer: Webservices Test Customer\", function () {\r",
									"//      pm.expect(customerName).to.eql(\"Test Customer: Webservices Test Customer\");\r",
									"//   });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87b38865-88a2-45ba-a417-ec43316dfe16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/CreatePODRecord\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CreatePODRecord>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n         <ccl:podDateTime>{{currentdate}}</ccl:podDateTime>\r\n         <!--Optional:-->\r\n         <ccl:receivedBy>EWS TestUser</ccl:receivedBy>\r\n         <ccl:isOnTime>true</ccl:isOnTime>\r\n         <ccl:reasonId>2</ccl:reasonId>  \r\n         <ccl:podDetails>\r\n        \r\n        <Comments>IWS TEST</Comments>\r\n      </ccl:podDetails>\r\n      </ccl:CreatePODRecord>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "AddEmailLabelToQueue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c32fa3f7-6d65-4cf6-9b46-382baefecbd6",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Email label added to queue\", function() {\r",
									"    pm.expect(body.AddEmailLabelToQueueResponse.AddEmailLabelToQueueResult).to.eq(\"true\");\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "699e585b-b520-4822-a8af-f35c5a83e64e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "CCL_Ebos_Webservice/AddEmailLabelToQueue",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:AddEmailLabelToQueue>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n         <!--Optional:-->\r\n         <ccl:shipperEmailAddress>postman@test.shipper</ccl:shipperEmailAddress>\r\n         <!--Optional:-->\r\n         <ccl:bookerEmailAddress>postman@test.booker</ccl:bookerEmailAddress>\r\n         <ccl:bookedByInternalUser>false</ccl:bookedByInternalUser>\r\n         <!--Optional:-->\r\n         <ccl:bookerName>postman test</ccl:bookerName>\r\n         <ccl:sendCommercialInvoice>false</ccl:sendCommercialInvoice>\r\n      </ccl:AddEmailLabelToQueue>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "SendSupplierCollectionEmailIfNecessary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc03e176-542c-44ef-bbb0-72c9d773e167",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd3b0d5-f731-4ff9-a18d-a8913c1e92ca",
								"exec": [
									"//Create collection date\r",
									"Date.prototype.addDays = function(days) {\r",
									"    var date = new Date(this.valueOf());\r",
									"    date.setDate(date.getDate() + days);\r",
									"    return date;\r",
									"}\r",
									"\r",
									"var date = new Date();\r",
									"date = date.addDays(2)\r",
									"var day = date.getDay();\r",
									"var collectionDate = new Date();\r",
									"\r",
									"if(day == 5 || day == 6 || day == 0 || day == 1) {\r",
									"\t\tcollectionDate = date.addDays(((1 + 7 - date.getDay()) % 7)+1);\r",
									"}\r",
									"else {\r",
									"\t\tcollectionDate = date;\r",
									"}\r",
									"\r",
									"var isoDate = collectionDate.toISOString().split(\"T\")[0].split(\"-\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"collectionDate\", isoDate[0] + \"-\" + isoDate[1] + \"-\" + isoDate[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8bb631fd-fe8f-4f26-a135-e30fd4ccfef2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/SendSupplierCollectionEmailIfNecessary\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:SendSupplierCollectionEmailIfNecessary>\r\n         <ccl:supplierId>2371</ccl:supplierId>\r\n         <!--Optional:-->\r\n         <ccl:consignmentRef></ccl:consignmentRef>\r\n         <!--Optional:-->\r\n         <ccl:consignmentLabels>\r\n            <!--Zero or more repetitions:-->\r\n            <ccl:Label>\r\n               <!--Optional:-->\r\n               <ccl:Filename></ccl:Filename>\r\n               <!--Optional:-->\r\n               <ccl:Bytes></ccl:Bytes>\r\n            </ccl:Label>\r\n         </ccl:consignmentLabels>\r\n         <ccl:shipmentCollectionDate>{{collectionDate}}</ccl:shipmentCollectionDate>\r\n         <!--Optional:-->\r\n         <ccl:shipmentCollectionPostcode>ML1 4GW</ccl:shipmentCollectionPostcode>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n         <ccl:customerId>81353</ccl:customerId>\r\n      </ccl:SendSupplierCollectionEmailIfNecessary>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{orderService}}"
					},
					"response": []
				},
				{
					"name": "MarkOrderAsCancelled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc776f6-bcb6-4ee3-9251-ce1cae39e493",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var customerName = body.MarkOrderAsCancelledResponse;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee0e271e-d901-43e3-9c86-0b870537bb00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_EBOS_WebService/MarkOrderAsCancelled\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_EBOS_WebService\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:MarkOrderAsCancelled>\r\n         <ccl:orderId>{{orderId}}</ccl:orderId>\r\n      </ccl:MarkOrderAsCancelled>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{orderService}}"
					},
					"response": []
				}
			],
			"id": "2e307066-a136-49b4-8064-e610c3fdbf5f"
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "LoginAllowsNonCclShipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d7efae-a034-4e92-b4f5-f7c531bb7d80",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var loginAllowsNonCclShipping = body.LoginAllowsNonCclShippingResponse.LoginAllowsNonCclShippingResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"loginAllowsNonCclShipping is false\", function () {\r",
									"        pm.expect(loginAllowsNonCclShipping).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "688041dd-85c6-4543-aaa6-29e306a913c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/LoginAllowsNonCclShipping\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:LoginAllowsNonCclShipping>\r\n         <!--Optional:-->\r\n         <ccl:login>81314</ccl:login>\r\n         <!--Optional:-->\r\n         <ccl:webservice>ShipmentBooking</ccl:webservice>\r\n      </ccl:LoginAllowsNonCclShipping>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{validation}}"
					},
					"response": []
				},
				{
					"name": "ValidateWebserviceLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab2c4907-23d1-4b15-8cf2-0091e1870c99",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var validateWebserviceLoginResult = body.ValidateWebserviceLoginResponse.ValidateWebserviceLoginResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"validateWebserviceLoginResult is true\", function () {\r",
									"        pm.expect(validateWebserviceLoginResult).to.eql(\"true\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a7a18e63-4a98-450a-a247-227e539d2989",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/ValidateWebserviceLogin\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:ValidateWebserviceLogin>\r\n         <ccl:loginID>81314</ccl:loginID>\r\n         <!--Optional:-->\r\n         <ccl:password>d4jHBHxBvps2AURm</ccl:password>\r\n         <!--Optional:-->\r\n         <ccl:webservice>ShipmentBooking</ccl:webservice>\r\n      </ccl:ValidateWebserviceLogin>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{validation}}"
					},
					"response": []
				},
				{
					"name": "ValidateWebServiceLoginForDelegation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1857c22-20d7-40bd-a0d4-b813669534cc",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var validateWebServiceLoginForDelegationResult = body.ValidateWebServiceLoginForDelegationResponse.ValidateWebServiceLoginForDelegationResult;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"validateWebServiceLoginForDelegationResult is false\", function () {\r",
									"        pm.expect(validateWebServiceLoginForDelegationResult).to.eql(\"false\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bb4a1b47-10f2-46f9-b552-fce0bf10d011",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/ValidateWebServiceLoginForDelegation\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:ValidateWebServiceLoginForDelegation>\r\n         <!--Optional:-->\r\n         <ccl:login>81314</ccl:login>\r\n         <!--Optional:-->\r\n         <ccl:password>d4jHBHxBvps2AURm</ccl:password>\r\n         <!--Optional:-->\r\n         <ccl:webservice>ShipmentBooking</ccl:webservice>\r\n      </ccl:ValidateWebServiceLoginForDelegation>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{validation}}"
					},
					"response": []
				}
			],
			"id": "42f2036e-78aa-46fb-84b1-b906440fddd4"
		},
		{
			"name": "SupplierTrackingEvents",
			"item": [
				{
					"name": "GetSupplierEventCodeDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cfda40a-1c5a-4e7a-aec6-5783569fc289",
								"exec": [
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"var description = body.GetSupplierEventCodeDetailsResponse.GetSupplierEventCodeDetailsResult.EventDescription;\r",
									"var code = body.GetSupplierEventCodeDetailsResponse.GetSupplierEventCodeDetailsResult.ExceptionCode;\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Description is as expected\", function () {\r",
									"        pm.expect(description).to.eql(\"A CORRECT COMPANY OR RECEIVER NAME IS NEEDED FOR DELIVERY. UPS IS ATTEMPTING TO OBTAIN THIS INFORMATION\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Exception Code is 12\", function () {\r",
									"        pm.expect(code).to.eql(\"12\");\r",
									"    });\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1393c1c0-4d8b-4c41-90eb-05766f3d8035",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetSupplierEventCodeDetails\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n  <soap:Body>\r\n    <GetSupplierEventCodeDetails xmlns=\"CCL_Ebos_Webservice\">\r\n      <eventCode>01</eventCode>\r\n      <supplierID>33</supplierID>\r\n    </GetSupplierEventCodeDetails>\r\n  </soap:Body>\r\n</soap:Envelope>"
						},
						"url": "{{url}}/trackingevent/trackingevent.asmx"
					},
					"response": []
				}
			],
			"id": "f8699602-d6f1-4e05-8d96-7997d0bc8acb"
		},
		{
			"name": "AuthenticationUnauthenticated",
			"item": [
				{
					"name": "Unprotected NoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae184cf-1720-49ca-bf96-8c26575260c5",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2779a9fd-8acb-4674-952e-3024710d42ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryNameFromIsoCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryNameFromIsoCode>\r\n         <!--Optional:-->\r\n         <ccl:code>FR</ccl:code>\r\n      </ccl:CountryNameFromIsoCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Unprotected Basic Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae184cf-1720-49ca-bf96-8c26575260c5",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a754c3d0-386e-43b1-acac-c63073037dbc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "wrongPassword",
								"username": "wrongUsername"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryNameFromIsoCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryNameFromIsoCode>\r\n         <!--Optional:-->\r\n         <ccl:code>FR</ccl:code>\r\n      </ccl:CountryNameFromIsoCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Unprotected Bearer Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae184cf-1720-49ca-bf96-8c26575260c5",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72c30b4b-b3ce-4678-b6b3-1ff64217caaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "nonsense"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryNameFromIsoCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryNameFromIsoCode>\r\n         <!--Optional:-->\r\n         <ccl:code>FR</ccl:code>\r\n      </ccl:CountryNameFromIsoCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Protected NoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31577e34-c525-4814-ba69-245c99ddbd52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountryFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountryFromName>\r\n         <!--Optional:-->\r\n         <ccl:name>United Kingdom</ccl:name>\r\n      </ccl:GetCountryFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Protected Basic Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3390f695-73ce-4e13-9a37-097e051fec9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "wrongPassword",
								"username": "wrongUsername"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountryFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountryFromName>\r\n         <!--Optional:-->\r\n         <ccl:name>United Kingdom</ccl:name>\r\n      </ccl:GetCountryFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Protected Bearer Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee6a68fb-87b7-420b-bedc-17b623e67105",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "Nonsense"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountryFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountryFromName>\r\n         <!--Optional:-->\r\n         <ccl:name>United Kingdom</ccl:name>\r\n      </ccl:GetCountryFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{url}}/{{addressService}}"
					},
					"response": []
				}
			],
			"id": "0d1f9ca0-f420-477a-8cc1-0d2ae6f0dd12",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f170c1b7-9bf8-4926-b081-1f5ff8ff452e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7a6d9eb-3d6f-4764-951e-fb5607bdd094",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "AuthenticationAuthenticated",
			"item": [
				{
					"name": "Unprotected NoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae184cf-1720-49ca-bf96-8c26575260c5",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b3a37049-addc-4ded-92cd-ad7e4299af6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryNameFromIsoCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryNameFromIsoCode>\r\n         <!--Optional:-->\r\n         <ccl:code>FR</ccl:code>\r\n      </ccl:CountryNameFromIsoCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Unprotected Basic Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae184cf-1720-49ca-bf96-8c26575260c5",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "015444c5-d19a-4532-913a-05c756ba64b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "wrongPassword",
								"username": "wrongUsername"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryNameFromIsoCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryNameFromIsoCode>\r\n         <!--Optional:-->\r\n         <ccl:code>FR</ccl:code>\r\n      </ccl:CountryNameFromIsoCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Unprotected Bearer Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae184cf-1720-49ca-bf96-8c26575260c5",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "032ef550-25dc-4067-bc3b-9879ffe241ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "nonsense"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/CountryNameFromIsoCode\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:CountryNameFromIsoCode>\r\n         <!--Optional:-->\r\n         <ccl:code>FR</ccl:code>\r\n      </ccl:CountryNameFromIsoCode>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Protected NoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "48c9fad3-d4b0-472a-b0d4-0f1ee5730c61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountyFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountyFromName>\r\n         <!--Optional:-->\r\n         <ccl:countyName>New York</ccl:countyName>\r\n      </ccl:GetCountyFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Protected Basic Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "523f47b7-e003-4c93-adb2-232b99997023",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "wrongPassword",
								"username": "wrongUsername"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountyFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountyFromName>\r\n         <!--Optional:-->\r\n         <ccl:countyName>New York</ccl:countyName>\r\n      </ccl:GetCountyFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				},
				{
					"name": "Protected Bearer Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60a0ffc-23a7-436f-9c80-ddd1ef0bda88",
								"exec": [
									"try {\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1506caf0-8c29-48dc-a1a5-618b557e939c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "nonsense"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetCountyFromName\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetCountyFromName>\r\n         <!--Optional:-->\r\n         <ccl:countyName>New York</ccl:countyName>\r\n      </ccl:GetCountyFromName>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>"
						},
						"url": "{{urlAuth}}/{{addressService}}"
					},
					"response": []
				}
			],
			"id": "29a9750c-6b3c-428a-979d-8d13672de317",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f170c1b7-9bf8-4926-b081-1f5ff8ff452e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7a6d9eb-3d6f-4764-951e-fb5607bdd094",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DirectRepresentationFile",
			"item": [
				{
					"name": "GetDirectRepresentationFileError",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Customer Name is Test Customer: Webservices Test Customer\", function () {\r",
									"        pm.expect(bodyError.faultstring).to.contain(\"Can not retrieve the requested Direct Representation File with name: DRFileNameTest\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d8bbb5f3-9678-4076-bd20-f99dada6a38c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetDirectRepresentationFile\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetDirectRepresentationFile>\r\n         <ccl:customerId>28037</ccl:customerId>\r\n         <ccl:supplierId>6276</ccl:supplierId>\r\n      </ccl:GetDirectRepresentationFile>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				},
				{
					"name": "GetDirectRepresentationFile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4ebde0-1541-4a04-bd25-d511e8b0e152",
								"exec": [
									"try {\r",
									"var body = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"]\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"}\r",
									"\r",
									"catch (e) {\r",
									"\r",
									"var bodyError = xml2Json(responseBody)[\"soap:Envelope\"][\"soap:Body\"][\"soap:Fault\"]\r",
									"\r",
									"    pm.test(\"Exception is thrown during testing\", function () {\r",
									"        pm.expect(e).to.be.null;\r",
									"    });\r",
									"\r",
									"    console.log(bodyError.faultstring);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8c8e8866-98cc-47a7-9765-f071958715cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "\"CCL_Ebos_Webservice/GetDirectRepresentationFile\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ccl=\"CCL_Ebos_Webservice\">\r\n   <soapenv:Header/>\r\n   <soapenv:Body>\r\n      <ccl:GetDirectRepresentationFile>\r\n         <ccl:customerId>75759</ccl:customerId>\r\n         <ccl:supplierId>123456</ccl:supplierId>\r\n      </ccl:GetDirectRepresentationFile>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{url}}/{{customerService}}"
					},
					"response": []
				}
			],
			"id": "1133b05c-e969-4829-b906-cad19a6ef057"
		}
	],
	"auth": {
		"type": "basic",
		"basic": {
			"password": "{{basicAuthPw}}",
			"username": "{{basicAuthUsername}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "33af7426-e1c3-47d7-9101-8f08070991ce",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "021c0d8c-e604-4bb7-a324-00842c5dfbfa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}